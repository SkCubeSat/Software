//
// Copyright (C) 2018 Kubos Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

use super::*;
use crate::messages::MessageID;

#[test]
fn test_unlog() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x24, 0x0, 0x0, 0xC0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0xF1, 0x0, 0x0,
        0x0, 0x2, 0x96, 0xB0, 0x8B,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x24, 0x0, 0x80, 0x20, 0x6, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x85, 0x6F, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4F,
        0x4B, 0x41, 0xFE, 0xF5, 0x3F,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_unlog(MessageID::BestXYZ), Ok(()));
}

#[test]
fn test_unlog_all() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x26, 0x0, 0x0, 0xC0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0xD5, 0xEA, 0xAF, 0x8D,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x26, 0x0, 0x80, 0x20, 0x6, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x45, 0x80, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4F,
        0x4B, 0x83, 0x1, 0x39, 0x5C,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_unlog_all(false), Ok(()));
}

#[test]
fn test_unlog_all_override() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x26, 0x0, 0x0, 0xC0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
        0x0, 0xB0, 0x8D, 0x13, 0x35,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x26, 0x0, 0x80, 0x20, 0x6, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x45, 0x80, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4F,
        0x4B, 0x83, 0x1, 0x39, 0x5C,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_unlog_all(true), Ok(()));
}
