/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__H
#define TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCommonTransfer1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeCommonBaseBootloader5_States
*/
typedef enum TctlmCubeCommonBaseBootloader5_StatesEnum {
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_IDLE = 0,                     /**< Bootloader is idle and ready to receive commands */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_SETUP_XFER = 1,          /**< Busy setting up read/write transfer - includes firmware file writes */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_AUTO_ERASE = 2,          /**< Busy erasing flash - internally triggered when uploading a firmware binary or config file (with metadata), or specified explicitely by user when writing raw data to memory */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_ERASE = 3,               /**< Busy erasing flash */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_WAIT_FRAME = 4,          /**< Busy waiting for next frame */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_WRITE = 5,               /**< Busy writing flash */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_COMMIT_FILE = 6,         /**< Busy committing new file to file table (including CRC calculation) - happens after successful data transfer */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_ERASE_FILE_TABLE = 7,    /**< Busy erase file table flash region in preperation for re-write - happens after successful file commit - intermediary step to improve comms responsiveness of bare-metal application */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_WRITE_FILE_TABLE = 8,    /**< Busy writing file table to flash - happens after successful table erase - this is the final step of a file upload, state returns to idle */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_READ = 9,                /**< Busy reading flash */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_DELETE = 10,             /**< Busy deleting file entry */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_SET_TARGET = 11,         /**< Busy setting the default application target */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_JUMP = 12,               /**< Busy jumping to application */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_RELOAD_CFG = 13,         /**< Busy reloading config after being set by the user. If the new config is successfully written to flash, a soft reset is triggered to reload the config automatically. */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_OB_WRITE = 14,           /**< Busy writing option bytes. If successful the MCU will reset automatically, otherwise the result will be stored in errors */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__STATE_BUSY_OB_COMMIT = 15,          /**< Busy launching option bytes. Will reset immediately if successful */
} TctlmCubeCommonBaseBootloader5_States;

/**
 * @brief Enumeration for TctlmCubeCommonBaseBootloader5_FileType
*/
typedef enum TctlmCubeCommonBaseBootloader5_FileTypeEnum {
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BIN = 0,    /**< Binary image file */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__CFG = 1,    /**< Binary config file */
} TctlmCubeCommonBaseBootloader5_FileType;

/**
 * @brief Enumeration for TctlmCubeCommonBaseBootloader5_ResetVal
*/
typedef enum TctlmCubeCommonBaseBootloader5_ResetValEnum {
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__DO_NOTHING = 0,    /**< Dummy Value */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__SOFT = 55,         /**< Performs reset immediately - not the same as common-framework */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__HARD = 66,         /**< Performs reset immediately */
} TctlmCubeCommonBaseBootloader5_ResetVal;

/**
 * @brief Enumeration for TctlmCubeCommonBaseBootloader5_UartBaud
*/
typedef enum TctlmCubeCommonBaseBootloader5_UartBaudEnum {
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BAUD_19200 = 0,     /**< 19200 */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BAUD_38400 = 1,     /**< 38400 */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BAUD_57600 = 2,     /**< 57600 */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BAUD_115200 = 3,    /**< 115200 */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BAUD_230400 = 4,    /**< 230400 */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BAUD_460800 = 5,    /**< 460800 */
    TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5__BAUD_921600 = 6,    /**< 921600 */
} TctlmCubeCommonBaseBootloader5_UartBaud;

/**
 * @brief Identification message structure
 * @details Identification information for this node
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_IdentificationStruct {
    TctlmCommonFrameworkEnums_NodeTypeLegacy nodeType;    /**< Node type identifier  */
    TctlmCommonFrameworkEnums_ProgramType programType;    /**< Program type identifier  */
    U8 interfaceVersion;                                  /**< Interface version  */
    U8 firmwareMajorVersion;                              /**< Firmware version (Major)  */
    U8 firmwareMinorVersion;                              /**< Firmware version (Minor)  */
    U16 runtimeSeconds;                                   /**< Seconds since processor start-up  */
    U16 runtimeMilliseconds;                              /**< Milliseconds (after the integer second) since processor start-up  */
} TctlmCubeCommonBaseBootloader5_Identification;

/**
 * @brief Serial Number message structure
 * @details Unique serial number of the CubeSpace Component
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_SerialNumberStruct {
    Text otpSerial[32];                                     /**< OTP ASCII string of chars denoting the serial number of this module  */
    Text cfgSerial[32];                                     /**< Config ASCII string of chars denoting the serial number of this module  */
    TctlmCommonFrameworkEnums_SerialSource activeSerial;    /**< Which serial number (OTP/Config) should be used for identification  */
} TctlmCubeCommonBaseBootloader5_SerialNumber;

/**
 * @brief Configuration message structure
 * @details Configuration of base bootloader
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_ConfigStruct {
    Text serialNumber[32];                                /**< Configurable serial number - used only if OtpOverride==TRUE  */
    U16 backoff;                                          /**< The amount of time the bootloader waits before automatically jumping to the default app target. Ensure that this value is large enough to be able to halt the bootloader  (valid range is between 100  and 10000 ) */
    Boolean otpOverride;                                  /**< If set, the node will always ignore OTP and use the serial number in config (NodeType+SerialInt)  */
    TctlmCubeCommonBaseBootloader5_UartBaud uart1Baud;    /**< UART1 baud rate  */
    U16 uart1Timeout;                                     /**< UART1 slave receive timeout  (measurment unit is [ms]. valid range is between 200 ms and 1000 ms) */
    U8 uart1RS485Addr;                                    /**< UART1 RS485 address  */
    Boolean uart1RS485Trans;                              /**< UART1 RS485 transceiver populated  */
    TctlmCubeCommonBaseBootloader5_UartBaud uart2Baud;    /**< UART2 baud rate (CubeComputer only)  */
    U16 uart2Timeout;                                     /**< UART2 slave receive timeout (CubeComputer only)  (measurment unit is [ms]. valid range is between 200 ms and 1000 ms) */
    U8 uart2RS485Addr;                                    /**< UART2 RS485 address (CubeComputer only)  */
    Boolean uart2RS485Trans;                              /**< UART2 RS485 transceiver populated (CubeComputer only)  */
    U8 can1Addr;                                          /**< CAN1 Address  */
    U16 can1Timeout;                                      /**< CAN1 slave receive timeout  (measurment unit is [ms]. valid range is between 200 ms and 1000 ms) */
    Boolean can1CspEn;                                    /**< CAN1 CSP enabled  */
    U8 can2Addr;                                          /**< CAN2 Address (CubeComputer only)  */
    U16 can2Timeout;                                      /**< CAN2 slave receive timeout (CubeComputer only)  (measurment unit is [ms]. valid range is between 200 ms and 1000 ms) */
    Boolean can2CspEn;                                    /**< CAN2 CSP enabled  */
    U8 i2cAddr;                                           /**< I2C Address  (valid range is between 1  and 127 ) */
    U16 i2cTimeout;                                       /**< I2C slave receive timeout  (measurment unit is [ms]. valid range is between 10 ms and 1000 ms) */
} TctlmCubeCommonBaseBootloader5_Config;

/**
 * @brief State message structure
 * @details State information of the application
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_StateStruct {
    TctlmCubeCommonBaseBootloader5_States appState;        /**< Current state of the application  */
    TctlmCubeCommonBaseBootloader5_States appStatePrev;    /**< Previous state of the application  */
    U32 result;                                            /**< Error code for the last operation - gets reset to 0 at start of new operation  */
    U32 opAddress;                                         /**< The current address being used for the operation, if applicable  */
    U8 opEBank;                                            /**< The current bank being used for erase operation, if applicable  */
    U16 opEPage;                                           /**< The current page being used for erase operation, if applicable  */
    U32 opDataRemain;                                      /**< The amount of data remaining for operation, if applicable  */
} TctlmCubeCommonBaseBootloader5_State;

/**
 * @brief Errors message structure
 * @details Error information of the application
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_ErrorsStruct {
    U32 result;                   /**< Error code for the last operation - gets reset to 0 at start of new operation  */
    U32 halInit;                  /**< Error code for HAL initialization (0 = OK)  */
    U32 flashInit;                /**< Error code for Flash initialization (0 = OK)  */
    U32 uart1Init;                /**< Error code for UART1 initialization (0 = OK)  */
    U32 uart2Init;                /**< Error code for UART2 initialization (0 = OK)  */
    U32 can1Init;                 /**< Error code for CAN1 initialization (0 = OK)  */
    U32 can2Init;                 /**< Error code for CAN2 initialization (0 = OK)  */
    U32 i2cInit;                  /**< Error code for I2C initialization (0 = OK)  */
    Boolean configInit;           /**< Config error flag set if configuration CRC failed and default config is being used  */
    Boolean timeout;              /**< Timeout error flag on last operation  */
    Boolean overrun;              /**< Data overrun error flag on last operation  */
    Boolean erasePage;            /**< Page erase error flag on last operation  */
    Boolean write;                /**< Write error flag on last operation  */
    Boolean fileCrc;              /**< File CRC error flag on upload complete  */
    Boolean commitFileTable;      /**< Set if failure to write file table to flash  */
    Boolean commitConfigTable;    /**< Set if failure to write config table to flash  */
    Boolean jumpTarget;           /**< Set if the jump target is invalid  */
} TctlmCubeCommonBaseBootloader5_Errors;

/**
 * @brief File Info message structure
 * @details Get information on the current file entry index. The index will automatically increment every time this telemetry is requested, and wrap back to first entry
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_FileInfoStruct {
    U8 fileHandle;                                    /**< Handle identifier of the file  */
    Boolean isCorrupt;                                /**< Set if the file associated with this entry failed CRC check. Use file handle to delete the entry  */
    TctlmCubeCommonBaseBootloader5_FileType type;     /**< The type of the file  */
    TctlmCommonFrameworkEnums_ProgramType program;    /**< The Program Type associated with the file  */
    U32 address;                                      /**< The adddress in flash where the file is located  */
    U32 size;                                         /**< File Size  (measurment unit is [Bytes]) */
    U32 crc;                                          /**< File CRC  */
    U8 firmwareMajorVersion;                          /**< Firmware version (Major) that this file is for/from  */
    U8 firmwareMinorVersion;                          /**< Firmware version (Minor) that this file is for/from  */
    U16 firmwarePatchVersion;                         /**< Firmware version (Patch) that this file is for/from  */
    U8 systemMajorVersion;                            /**< System version (Major) that this file is for/from  */
    U8 systemMinorVersion;                            /**< System version (Minor) that this file is for/from  */
    U16 systemPatchVersion;                           /**< System version (Patch) that this file is for/from  */
    Text serial[32];                                  /**< ASCII string of chars denoting the serial number this file is associated with  */
    Boolean empty;                                    /**< Signals if the fil list is empty  */
    Boolean first;                                    /**< Signals if this returned entry is the first in the file list - used to manage wrapping  */
    Boolean last;                                     /**< Signals if this returned entry is the last in the file list - used to manage wrapping  */
} TctlmCubeCommonBaseBootloader5_FileInfo;

/**
 * @brief Write Memory Setup message structure
 * @details Setup a memory write - not to be used under normal circumstances
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_WriteMemorySetupStruct {
    U32 address;          /**< Address of memory to read  */
    U32 size;             /**< Size of memory to read  */
    Boolean autoErase;    /**< Should the region to be written be automatically erased  */
} TctlmCubeCommonBaseBootloader5_WriteMemorySetup;

/**
 * @brief Read Memory Setup message structure
 * @details Setup a memory read - not to be used under normal circumstances
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_ReadMemorySetupStruct {
    U32 address;    /**< Address of memory to read  */
    U32 size;       /**< Size of memory to read  */
} TctlmCubeCommonBaseBootloader5_ReadMemorySetup;

/**
 * @brief Eraze Memory Setup message structure
 * @details Setup a memory erase - not to be used under normal circumstances
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_EraseMemorySetupStruct {
    U32 address;    /**< Address of memory to read  */
    U32 size;       /**< Size of memory to read  */
} TctlmCubeCommonBaseBootloader5_EraseMemorySetup;

/**
 * @brief Option Bytes message structure
 * @details Read/Write - not to be used under normal circumstances
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_OptionBytesStruct {
    U32 magicNumber;      /**< Must be correct to set  */
    U8 rdp;               /**< See reference manual  */
    U8 borLev;            /**< See reference manual  */
    Boolean nRstStop;     /**< See reference manual  */
    Boolean nRstStdby;    /**< See reference manual  */
    Boolean nRstShdw;     /**< See reference manual  */
    Boolean iWdgSw;       /**< See reference manual  */
    Boolean iWdgStop;     /**< See reference manual  */
    Boolean iWdgStdby;    /**< See reference manual  */
    Boolean wWdgSw;       /**< See reference manual  */
    Boolean bfb2;         /**< See reference manual  */
    Boolean dBank;        /**< See reference manual  */
    Boolean nBoot1;       /**< See reference manual  */
    Boolean sram2Pe;      /**< See reference manual  */
    Boolean sram2Rst;     /**< See reference manual  */
    Boolean nSwBoot0;     /**< See reference manual  */
    Boolean nBoot0;       /**< See reference manual  */
    Boolean pcRopRdp;     /**< See reference manual  */
    U32 pcRopStrt1;       /**< See reference manual  */
    U32 pcRopEnd1;        /**< See reference manual  */
    U8 wrpAStrt1;         /**< See reference manual  */
    U8 wrpAEnd1;          /**< See reference manual  */
    U8 wrpBStrt1;         /**< See reference manual  */
    U8 wrpBEnd1;          /**< See reference manual  */
    U32 pcRopStrt2;       /**< See reference manual  */
    U32 pcRopEnd2;        /**< See reference manual  */
    U8 wrpAStrt2;         /**< See reference manual  */
    U8 wrpAEnd2;          /**< See reference manual  */
    U8 wrpBStrt2;         /**< See reference manual  */
    U8 wrpBEnd2;          /**< See reference manual  */
} TctlmCubeCommonBaseBootloader5_OptionBytes;

/**
 * @brief Telecommand Acknowledge message structure
 * @details Used with the I2C protocol to receive Telecommand Ack/Nack
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_TelecommandAcknowledgeStruct {
    U8 id;                                         /**< Last TcTlm ID  */
    TctlmCommonFrameworkEnums_TcTlmError error;    /**< Last TcTlm Error  */
    U8 errorIndex;                                 /**< Buffer index of error  */
    Boolean read;                                  /**< Flag indicating if this acknowledgement has been read sinc the last TCTLM  */
} TctlmCubeCommonBaseBootloader5_TelecommandAcknowledge;

/**
 * @brief Communication Status message structure
 * @details Communication Status
 */
typedef struct TCTLM_PACKED TctlmCubeCommonBaseBootloader5_CommsStatusStruct {
    U16 uart1TcCounter;              /**< UART1 No. of telecommands received  */
    U16 uart1TlmCounter;             /**< UART1 No. of telemetry requests received  */
    U16 uart1SoftwareProtoErrors;    /**< UART1 Errors reported in SW checks  */
    U16 uart1HardwareFlagErrors;     /**< UART1 Errors reported by HW Flags  */
    U16 uart2TcCounter;              /**< UART2 No. of telecommands received  */
    U16 uart2TlmCounter;             /**< UART2 No. of telemetry requests received  */
    U16 uart2SoftwareProtoErrors;    /**< UART2 Errors reported in SW checks  */
    U16 uart2HardwareFlagErrors;     /**< UART2 Errors reported by HW Flags  */
    U16 can1TcCounter;               /**< CAN1 No. of telecommands received  */
    U16 can1TlmCounter;              /**< CAN1 No. of telemetry requests received  */
    U16 can1SoftwareProtoErrors;     /**< CAN1 Errors reported in SW checks  */
    U16 can1HardwareFlagErrors;      /**< CAN1 Errors reported by HW Flags  */
    U16 can2TcCounter;               /**< CAN2 No. of telecommands received  */
    U16 can2TlmCounter;              /**< CAN2 No. of telemetry requests received  */
    U16 can2SoftwareProtoErrors;     /**< CAN2 Errors reported in SW checks  */
    U16 can2HardwareFlagErrors;      /**< CAN2 Errors reported by HW Flags  */
    U16 i2cTcCounter;                /**< I2C No. of telecommands received  */
    U16 i2cTlmCounter;               /**< I2C No. of telemetry requests received  */
    U16 i2cSoftwareProtoErrors;      /**< I2C Errors reported in SW checks  */
    U16 i2cHardwareFlagErrors;       /**< I2C Errors reported by HW Flags  */
} TctlmCubeCommonBaseBootloader5_CommsStatus;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 1, Reset
 * @details Perform a soft reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setReset(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_ResetVal setVal);

/**
 * @brief ID 2, Halt Bootloader
 * @details Stay in bootloader. Do NOT jump to app
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setHalt(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 3, Configuration
 * @details Configuration of base bootloader
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_Config *setVal);

/**
 * @brief ID 4, Default application target
 * @details Set/Get the default application the bootloader will jump to if not specifically commanded
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setDefaultAppTarget(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 5, Jump To Default Application
 * @details Trigger Bootloader to jump to the default application
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setJumpToDefaultApp(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 6, Jump To Application
 * @details Trigger Bootloader to jump to the specified application
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setJumpToApp(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 7, Jump To Address
 * @details Trigger Bootloader to jump to the specified address - DO NOT use under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setJumpToAddress(TypeDef_TctlmEndpoint *endpoint, U32 setVal);

/**
 * @brief ID 8, Reset File Info Index
 * @details Reset the file info index to start from the first index in the file list. Then request file info to increment the index automatically until last is detected
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setResetFileInfoIdx(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 9, Write File Setup
 * @details Setup a file write
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setWriteFileSetup(TypeDef_TctlmEndpoint *endpoint, U8* setVal);

/**
 * @brief ID 10, Delete File Entry
 * @details Delete a file entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setDeleteFileEntry(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 11, Write Memory Setup
 * @details Setup a memory write - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setWriteMemorySetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_WriteMemorySetup *setVal);

/**
 * @brief ID 12, Read Memory Setup
 * @details Setup a memory read - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setReadMemorySetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_ReadMemorySetup *setVal);

/**
 * @brief ID 13, Eraze Memory Setup
 * @details Setup a memory erase - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setEraseMemorySetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_EraseMemorySetup *setVal);

/**
 * @brief ID 14, Option Bytes
 * @details Read/Write - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setOptionBytes(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_OptionBytes *setVal);

/**
 * @brief ID 15, Commit Option Bytes
 * @details Commit option bytes. Will cause reset if successful
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_setCommitOptionBytes(TypeDef_TctlmEndpoint *endpoint, U32 setVal);


 /* GET function prototypes */

/**
 * @brief ID 128, Identification
 * @details Identification information for this node
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getIdentification(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_Identification* returnVal);

/**
 * @brief ID 129, Serial Number
 * @details Unique serial number of the CubeSpace Component
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getSerialNumber(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_SerialNumber* returnVal);

/**
 * @brief ID 130, Configuration
 * @details Configuration of base bootloader
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_Config* returnVal);

/**
 * @brief ID 131, State
 * @details State information of the application
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getState(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_State* returnVal);

/**
 * @brief ID 132, Errors
 * @details Error information of the application
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getErrors(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_Errors* returnVal);

/**
 * @brief ID 133, File Info
 * @details Get information on the current file entry index. The index will automatically increment every time this telemetry is requested, and wrap back to first entry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getFileInfo(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_FileInfo* returnVal);

/**
 * @brief ID 134, Default application target
 * @details Set/Get the default application the bootloader will jump to if not specifically commanded
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getDefaultAppTarget(TypeDef_TctlmEndpoint *endpoint, U8 *returnVal);

/**
 * @brief ID 135, Option Bytes
 * @details Read/Write - not to be used under normal circumstances
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getOptionBytes(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_OptionBytes* returnVal);

/**
 * @brief ID 136, Communication Status
 * @details Communication Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getCommsStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_CommsStatus* returnVal);

/**
 * @brief ID 138, Telecommand Acknowledge
 * @details Used with the I2C protocol to receive Telecommand Ack/Nack
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeCommonBaseBootloader5_getTelecommandAcknowledge(TypeDef_TctlmEndpoint *endpoint, TctlmCubeCommonBaseBootloader5_TelecommandAcknowledge* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_COMMON_BASE_BOOTLOADER_5_H
