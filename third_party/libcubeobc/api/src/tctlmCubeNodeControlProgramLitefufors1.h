/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCubeNodeCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramLitefufors1_NodeState
*/
typedef enum TctlmCubeNodeControlProgramLitefufors1_NodeStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__NODE_OFF = 0,          /**< Node is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__NODE_IDLE = 1,         /**< Node is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__NODE_UFORS_PWR = 2,    /**< Node is powering on or off one or more uFORS */
} TctlmCubeNodeControlProgramLitefufors1_NodeState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramLitefufors1_UforsAxis
*/
typedef enum TctlmCubeNodeControlProgramLitefufors1_UforsAxisEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_AXIS_X = 0,          /**< uFORS on the X-axis */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_AXIS_Y = 1,          /**< uFORS on the Y-axis */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_AXIS_Z = 2,          /**< uFORS on the Z-axis */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_AXIS_INVALID = 3,    /**< Used to signal not-in-use */
} TctlmCubeNodeControlProgramLitefufors1_UforsAxis;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramLitefufors1_UforsState
*/
typedef enum TctlmCubeNodeControlProgramLitefufors1_UforsStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_OFF = 0,      /**< uFORS is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_BOOT = 1,     /**< uFORS is Booting */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_RESET = 2,    /**< uFORS is being reset */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_IDLE = 3,     /**< uFORS is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_AUTO = 4,     /**< uFORS is Auto-Sampling */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__UFORS_ERROR = 5,    /**< uFORS is in an Error State */
} TctlmCubeNodeControlProgramLitefufors1_UforsState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramLitefufors1_UforsPowerState
*/
typedef enum TctlmCubeNodeControlProgramLitefufors1_UforsPowerStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__POWERED_NO_CHANGE = 0,    /**< No change */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__POWERED_OFF = 1,          /**< uFORS Power Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__POWERED_ON = 2,           /**< uFORS Power On */
} TctlmCubeNodeControlProgramLitefufors1_UforsPowerState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramLitefufors1_UforsReqResult
*/
typedef enum TctlmCubeNodeControlProgramLitefufors1_UforsReqResultEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__REQ_NONE = 0,          /**< No Request Yet */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__REQ = 1,               /**< Request Response */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__SUM_ERROR = 2,         /**< Sum Error */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__CORRUPT_DATA = 3,      /**< Corrupt Data */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__JUNK_DATA = 4,         /**< Junk Data */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__INCOMPLETE_MSG = 5,    /**< Incomplete Message */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__TIMEOUT = 6,           /**< Timeout */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1__OVERFLOW = 7,          /**< Overflow */
} TctlmCubeNodeControlProgramLitefufors1_UforsReqResult;

/**
 * @brief uFORS Power State message structure
 * @details Set the uFORS Power States
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsPowerStruct {
    TctlmCubeNodeControlProgramLitefufors1_UforsPowerState powerUforsX;    /**< X-axis uFORS Power State  */
    TctlmCubeNodeControlProgramLitefufors1_UforsPowerState powerUforsY;    /**< Y-axis uFORS1 Power State  */
    TctlmCubeNodeControlProgramLitefufors1_UforsPowerState powerUforsZ;    /**< Z-axis uFORS2 Power State  */
} TctlmCubeNodeControlProgramLitefufors1_UforsPower;

/**
 * @brief uFORS Port Map message structure
 * @details Mapping of connected uFORS(s) from port to the axis of the uFORS (there should not be duplicates, the unused port should be INVALID)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsPortMapStruct {
    TctlmCubeNodeControlProgramLitefufors1_UforsAxis uforsAxisPort1;    /**< Selects which axis is represented by the uFORS connected to port 1  */
    TctlmCubeNodeControlProgramLitefufors1_UforsAxis uforsAxisPort2;    /**< Selects which axis is represented by the uFORS connected to port 2  */
    TctlmCubeNodeControlProgramLitefufors1_UforsAxis uforsAxisPort3;    /**< Selects which axis is represented by the uFORS connected to port 3  */
    TctlmCubeNodeControlProgramLitefufors1_UforsAxis uforsAxisPort4;    /**< Selects which axis is represented by the uFORS connected to port 4  */
} TctlmCubeNodeControlProgramLitefufors1_UforsPortMap;

/**
 * @brief uFORS Service Settings message structure
 * @details Set/Get the uFORS Service Settings - used by all instances
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsSvcSettingsStruct {
    U32 maxReqErrors;       /**< uFORS Maximum Number of data request Errors Before Entering Error State  */
    U16 sampleFrequency;    /**< uFORS Sample Frequency  (measurment unit is [Hz]. valid range is between 5 Hz and 1000 Hz) */
    Boolean autoSample;     /**< uFORS Auto-Sample Enable/Disable  */
} TctlmCubeNodeControlProgramLitefufors1_UforsSvcSettings;

/**
 * @brief Node Service Status message structure
 * @details Node Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_NodeSvcStatusStruct {
    TctlmCubeNodeControlProgramLitefufors1_NodeState nodeState;    /**< CubeNode Node Service State  */
    U32 bootErrorCodeUforsX;                                       /**< uFORS X Boot Error Code  */
    U32 bootErrorCodeUforsY;                                       /**< uFORS Y Boot Error Code  */
    U32 bootErrorCodeUforsZ;                                       /**< uFORS Y Boot Error Code  */
} TctlmCubeNodeControlProgramLitefufors1_NodeSvcStatus;

/**
 * @brief uFORS Service Status message structure
 * @details uFORS Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsSvcStatusStruct {
    TctlmCubeNodeControlProgramLitefufors1_UforsState stateUforsX;                /**< uFORS X Service State  */
    U32 failCountUforsX;                                                          /**< uFORS X Request Failure Count  */
    U32 failCountLastSuccessUforsX;                                               /**< uFORS X Request Failure Count at Last Success  */
    TctlmCubeNodeControlProgramLitefufors1_UforsReqResult lastReqResultUforsX;    /**< uFORS X Last Request Result  */
    TctlmCubeNodeControlProgramLitefufors1_UforsState stateUforsY;                /**< uFORS Y Service State  */
    U32 failCountUforsY;                                                          /**< uFORS Y Request Failure Count  */
    U32 failCountLastSuccessUforsY;                                               /**< uFORS Y Request Failure Count at Last Success  */
    TctlmCubeNodeControlProgramLitefufors1_UforsReqResult lastReqResultUforsY;    /**< uFORS Y Last Request Result  */
    TctlmCubeNodeControlProgramLitefufors1_UforsState stateUforsZ;                /**< uFORS Z Service State  */
    U32 failCountUforsZ;                                                          /**< uFORS Z Request Failure Count  */
    U32 failCountLastSuccessUforsZ;                                               /**< uFORS Z Request Failure Count at Last Success  */
    TctlmCubeNodeControlProgramLitefufors1_UforsReqResult lastReqResultUforsZ;    /**< uFORS Z Last Request Result  */
} TctlmCubeNodeControlProgramLitefufors1_UforsSvcStatus;

/**
 * @brief uFORS TLM message structure
 * @details Get latest uFORS TLM Packets (does not perform a new request)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsTlmStruct {
    F32 rateUforsX;                     /**< uFORS X Angular rate  (measurment unit is [degps]. valid range is between -20 degps and 20 degps) */
    F32 rateUforsY;                     /**< uFORS Y  Angular rate  (measurment unit is [degps]. valid range is between -20 degps and 20 degps) */
    F32 rateUforsZ;                     /**< uFORS Z  Angular rate  (measurment unit is [degps]. valid range is between -20 degps and 20 degps) */
    Boolean nogoUforsX;                 /**< uFORS XStatus - NOGO bit  */
    Boolean rstAckUforsX;               /**< uFORS X Status - Reset acknowledge bit  */
    Boolean tempWarnUforsX;             /**< uFORS X Status - temperature warning bit  */
    Boolean auxControlLoopErrUforsX;    /**< uFORS X Status - auxiliary control loop error bit  */
    Boolean hardBitErrUforsX;           /**< uFORS X Status - Hardware BIT error bit  */
    Boolean measRangeErrUforsX;         /**< uFORS X Status - Measurement range exceeded bit  */
    Boolean unknwnCmdUforsX;            /**< uFORS X Status - unknown command bit  */
    Boolean nogoUforsY;                 /**< uFORS Y  Status - NOGO bit  */
    Boolean rstAckUforsY;               /**< uFORS Y  Status - Reset acknowledge bit  */
    Boolean tempWarnUforsY;             /**< uFORS Y  Status - temperature warning bit  */
    Boolean auxControlLoopErrUforsY;    /**< uFORS Y  Status - auxiliary control loop error bit  */
    Boolean hardBitErrUforsY;           /**< uFORS Y  Status - Hardware BIT error bit  */
    Boolean measRangeErrUforsY;         /**< uFORS Y  Status - Measurement range exceeded bit  */
    Boolean unknwnCmdUforsY;            /**< uFORS Y  Status - unknown command bit  */
    Boolean nogoUforsZ;                 /**< uFORS Z  Status - NOGO bit  */
    Boolean rstAckUforsZ;               /**< uFORS Z  Status - Reset acknowledge bit  */
    Boolean tempWarnUforsZ;             /**< uFORS Z  Status - temperature warning bit  */
    Boolean auxControlLoopErrUforsZ;    /**< uFORS Z  Status - auxiliary control loop error bit  */
    Boolean hardBitErrUforsZ;           /**< uFORS Z  Status - Hardware BIT error bit  */
    Boolean measRangeErrUforsZ;         /**< uFORS Z  Status - Measurement range exceeded bit  */
    Boolean unknwnCmdUforsZ;            /**< uFORS Z  Status - unknown command bit  */
} TctlmCubeNodeControlProgramLitefufors1_UforsTlm;

/**
 * @brief uFORS X TLM message structure
 * @details Get uFORS X TLM Packet (performs a new request only if auto-sample is disabled)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsTlmXStruct {
    F32 rate;                     /**< Angular rate  (measurment unit is [degps]. valid range is between -20 degps and 20 degps) */
    Boolean nogo;                 /**< Status - NOGO bit  */
    Boolean rstAck;               /**< Status - Reset acknowledge bit  */
    Boolean tempWarn;             /**< Status - temperature warning bit  */
    Boolean auxControlLoopErr;    /**< Status - auxiliary control loop error bit  */
    Boolean hardBitErr;           /**< Status - Hardware BIT error bit  */
    Boolean measRangeErr;         /**< Status - Measurement range exceeded bit  */
    Boolean unknwnCmd;            /**< Status - unknown command bit  */
} TctlmCubeNodeControlProgramLitefufors1_UforsTlmX;

/**
 * @brief uFORS Y TLM message structure
 * @details Get uFORS Y TLM Packet (performs a new request only if auto-sample is disabled)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsTlmYStruct {
    F32 rate;                     /**< Angular rate  (measurment unit is [degps]. valid range is between -20 degps and 20 degps) */
    Boolean nogo;                 /**< Status - NOGO bit  */
    Boolean rstAck;               /**< Status - Reset acknowledge bit  */
    Boolean tempWarn;             /**< Status - temperature warning bit  */
    Boolean auxControlLoopErr;    /**< Status - auxiliary control loop error bit  */
    Boolean hardBitErr;           /**< Status - Hardware BIT error bit  */
    Boolean measRangeErr;         /**< Status - Measurement range exceeded bit  */
    Boolean unknwnCmd;            /**< Status - unknown command bit  */
} TctlmCubeNodeControlProgramLitefufors1_UforsTlmY;

/**
 * @brief uFORS Z TLM message structure
 * @details Get uFORS Z TLM Packet (performs a new request only if auto-sample is disabled)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramLitefufors1_UforsTlmZStruct {
    F32 rate;                     /**< Angular rate  (measurment unit is [degps]. valid range is between -20 degps and 20 degps) */
    Boolean nogo;                 /**< Status - NOGO bit  */
    Boolean rstAck;               /**< Status - Reset acknowledge bit  */
    Boolean tempWarn;             /**< Status - temperature warning bit  */
    Boolean auxControlLoopErr;    /**< Status - auxiliary control loop error bit  */
    Boolean hardBitErr;           /**< Status - Hardware BIT error bit  */
    Boolean measRangeErr;         /**< Status - Measurement range exceeded bit  */
    Boolean unknwnCmd;            /**< Status - unknown command bit  */
} TctlmCubeNodeControlProgramLitefufors1_UforsTlmZ;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 67, uFORS Port Map
 * @details Mapping of connected uFORS(s) from port to the axis of the uFORS (there should not be duplicates, the unused port should be INVALID)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_setUforsPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsPortMap *setVal);

/**
 * @brief ID 68, uFORS Power State
 * @details Set the uFORS Power States
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_setUforsPower(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsPower *setVal);

/**
 * @brief ID 69, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_setNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);

/**
 * @brief ID 70, uFORS Service Settings
 * @details Set/Get the uFORS Service Settings - used by all instances
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_setUforsSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsSvcSettings *setVal);


 /* GET function prototypes */

/**
 * @brief ID 188, uFORS Z TLM
 * @details Get uFORS Z TLM Packet (performs a new request only if auto-sample is disabled)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getUforsTlmZ(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsTlmZ* returnVal);

/**
 * @brief ID 189, uFORS X TLM
 * @details Get uFORS X TLM Packet (performs a new request only if auto-sample is disabled)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getUforsTlmX(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsTlmX* returnVal);

/**
 * @brief ID 190, uFORS Service Status
 * @details uFORS Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getUforsSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsSvcStatus* returnVal);

/**
 * @brief ID 191, uFORS Service Settings
 * @details Set/Get the uFORS Service Settings - used by all instances
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getUforsSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsSvcSettings* returnVal);

/**
 * @brief ID 192, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean *returnVal);

/**
 * @brief ID 193, uFORS Port Map
 * @details Mapping of connected uFORS(s) from port to the axis of the uFORS (there should not be duplicates, the unused port should be INVALID)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getUforsPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsPortMap* returnVal);

/**
 * @brief ID 194, Node Service Status
 * @details Node Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getNodeSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_NodeSvcStatus* returnVal);

/**
 * @brief ID 195, uFORS TLM
 * @details Get latest uFORS TLM Packets (does not perform a new request)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getUforsTlm(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsTlm* returnVal);

/**
 * @brief ID 196, uFORS Y TLM
 * @details Get uFORS Y TLM Packet (performs a new request only if auto-sample is disabled)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramLitefufors1_getUforsTlmY(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramLitefufors1_UforsTlmY* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_LITEFUFORS_1_H
