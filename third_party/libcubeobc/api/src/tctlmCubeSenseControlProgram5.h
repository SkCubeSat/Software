/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__H
#define TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCommonTransfer1.h"
#include "tctlmCubeSenseCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeSenseControlProgram5_LocSelection
*/
typedef enum TctlmCubeSenseControlProgram5_LocSelectionEnum {
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__TOP = 0,    /**< Top Half of SRAM */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__BOT = 1,    /**< Bottom Half of SRAM */
} TctlmCubeSenseControlProgram5_LocSelection;

/**
 * @brief Enumeration for TctlmCubeSenseControlProgram5_DirSelection
*/
typedef enum TctlmCubeSenseControlProgram5_DirSelectionEnum {
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__DOWNLOAD = 0,    /**< Download from node */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__UPLOAD = 1,      /**< Upload to node */
} TctlmCubeSenseControlProgram5_DirSelection;

/**
 * @brief Enumeration for TctlmCubeSenseControlProgram5_ImageSize
*/
typedef enum TctlmCubeSenseControlProgram5_ImageSizeEnum {
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_1024X1024 = 0,    /**< 1024 x 1024 */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_512X512 = 1,      /**< 512 x 512 */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_256X256 = 2,      /**< 256 x 256 */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_128X128 = 3,      /**< 128 x 128 */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SIZE_64X64 = 4,        /**< 64 x 64 */
} TctlmCubeSenseControlProgram5_ImageSize;

/**
 * @brief Enumeration for TctlmCubeSenseControlProgram5_DetectResult
*/
typedef enum TctlmCubeSenseControlProgram5_DetectResultEnum {
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__DET_STARTUP = 0,      /**< Initialized */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__NO_DETECT = 1,        /**< Nothing Detected */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__DET_PENDING = 2,      /**< Pending a result */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SUN_NOT_FOUND = 6,    /**< No Sun found */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SUCCESS = 7,          /**< Sun detected */
} TctlmCubeSenseControlProgram5_DetectResult;

/**
 * @brief Enumeration for TctlmCubeSenseControlProgram5_CaptureResult
*/
typedef enum TctlmCubeSenseControlProgram5_CaptureResultEnum {
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__CAP_STARTUP = 0,                /**< Initialized */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__CAP_PENDING = 1,                /**< Issued but not complete */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__CAPTURE_SUCCESS_NORMAL = 2,     /**< Successful capture */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__TIMEOUT = 3,                    /**< Response Timeout */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__SRAMERR = 4,                    /**< Overcurrent Detected */
    TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5__CAPTURE_SUCCESS_FLIPPED = 5,    /**< Successful capture but result flipped */
} TctlmCubeSenseControlProgram5_CaptureResult;

/**
 * @brief CAM Distortion message structure
 * @details Distortion coefficients for CAM
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_CamLensDistortionStruct {
    F32 c0;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c1;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c2;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c3;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
    F32 c4;    /**< Coefficient 0  (valid range is between -100  and 100 ) */
} TctlmCubeSenseControlProgram5_CamLensDistortion;

/**
 * @brief Request Masking Areas message structure
 * @details 5 masked areas each specified by 4 coordinates
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_CamMasksStruct {
    U16 area1Xmin;    /**< Minimum X of Area 1  */
    U16 area1Xmax;    /**< Maximum X of Area 1  */
    U16 area1Ymin;    /**< Minimum Y of Area 1  */
    U16 area1Ymax;    /**< Maximum Y of Area 1  */
    U16 area2Xmin;    /**< Minimum X of Area 2  */
    U16 area2Xmax;    /**< Maximum X of Area 2  */
    U16 area2Ymin;    /**< Minimum Y of Area 2  */
    U16 area2Ymax;    /**< Maximum Y of Area 2  */
    U16 area3Xmin;    /**< Minimum X of Area 3  */
    U16 area3Xmax;    /**< Maximum X of Area 3  */
    U16 area3Ymin;    /**< Minimum Y of Area 3  */
    U16 area3Ymax;    /**< Maximum Y of Area 3  */
    U16 area4Xmin;    /**< Minimum X of Area 4  */
    U16 area4Xmax;    /**< Maximum X of Area 4  */
    U16 area4Ymin;    /**< Minimum Y of Area 4  */
    U16 area4Ymax;    /**< Maximum Y of Area 4  */
    U16 area5Xmin;    /**< Minimum X of Area 5  */
    U16 area5Xmax;    /**< Maximum X of Area 5  */
    U16 area5Ymin;    /**< Minimum Y of Area 5  */
    U16 area5Ymax;    /**< Maximum Y of Area 5  */
} TctlmCubeSenseControlProgram5_CamMasks;

/**
 * @brief Setup Image Transfer message structure
 * @details Setup image transfer details
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_ImageTransferSetupStruct {
    TctlmCubeSenseControlProgram5_LocSelection locSelect;    /**< Location in SRAM from which to download  */
    TctlmCubeSenseControlProgram5_ImageSize imageSize;       /**< Resolution selection of image to be downloaded  */
    TctlmCubeSenseControlProgram5_DirSelection direction;    /**< Download or upload image  */
} TctlmCubeSenseControlProgram5_ImageTransferSetup;

/**
 * @brief Sensor results message structure
 * @details Sensor results
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_SensorResultsStruct {
    F64 sensorA;                                                         /**< Alpha Angle  (measurment unit is [deg]) */
    F64 sensorB;                                                         /**< Beta Angle  (measurment unit is [deg]) */
    TctlmCubeSenseControlProgram5_CaptureResult sensorCaptureResult;     /**< 0 = Start-up, 1 = Result pending, 2 = Success, 3 = Timeout, 4 = SRAMErr  */
    TctlmCubeSenseControlProgram5_DetectResult sensorDetectionResult;    /**< 0 = Start-up, 1 = No Detection Performed, 2 = Detection Pending, 6 = Sun not found, 7 = Succesful Detection  */
} TctlmCubeSenseControlProgram5_SensorResults;

/**
 * @brief Sensor results timestamp message structure
 * @details Timestamp of last results
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_SensorResultsTimestampStruct {
    U32 unixTimestampSeconds;        /**< Unix timestamp s  (measurment unit is [s]) */
    U32 unixTimestampNanoSeconds;    /**< Unix timestamp ns  (measurment unit is [ns]. valid range is between 0 ns and 999999999 ns) */
} TctlmCubeSenseControlProgram5_SensorResultsTimestamp;

/**
 * @brief Sensor Results Trigger message structure
 * @details Sensor Results with Auto-trigger
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_SensorResultTriggerStruct {
    F64 sensorA;                                                         /**< Alpha Angle  (measurment unit is [deg]) */
    F64 sensorB;                                                         /**< Beta Angle  (measurment unit is [deg]) */
    TctlmCubeSenseControlProgram5_CaptureResult sensorCaptureResult;     /**< 0 = Start-up, 1 = Result pending, 2 = Success, 3 = Timeout, 4 = SRAMErr  */
    TctlmCubeSenseControlProgram5_DetectResult sensorDetectionResult;    /**< 0 = Start-up, 1 = No Detection Performed, 2 = Detection Pending, 6 = Sun not found, 7 = Succesful Detection  */
} TctlmCubeSenseControlProgram5_SensorResultTrigger;

/**
 * @brief Set Camera boresight message structure
 * @details Set Camera boresight pixel location
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_CamBoresightStruct {
    F64 xpixel;    /**< 100*(X Pixel location of camera boresight)  */
    F64 ypixel;    /**< 100*(Y Pixel location of camera boresight)  */
} TctlmCubeSenseControlProgram5_CamBoresight;

/**
 * @brief Set Sensor Masking Area message structure
 * @details Specify which areas of sensor to mask
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_CamMaskStruct {
    U8 areaNumber;    /**< Number indicating which of 5 (0-4) areas will be specified  */
    U16 xmin;         /**< Minimum X value of the area (X=0 is left side of image)  */
    U16 xmax;         /**< Maximum X value of the area  */
    U16 ymin;         /**< Minimum Y value of the area (Y=0 is top of image)  */
    U16 ymax;         /**< Maximum Y value of the area  */
} TctlmCubeSenseControlProgram5_CamMask;

/**
 * @brief Auto Cam Sensor Raw message structure
 * @details Raw pixel values for calibration perposes
 */
typedef struct TCTLM_PACKED TctlmCubeSenseControlProgram5_AutoCamSensorRawStruct {
    F64 pixelX;    /**< The raw X pixel value  */
    F64 pixelY;    /**< The raw Y pixel value  */
} TctlmCubeSenseControlProgram5_AutoCamSensorRaw;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 58, Detection Area Row Select
 * @details Detection Area Row Select
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setDetectionAreaRowSelect(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 59, Set Cam Detection Threshold
 * @details Set threshold for cam detection
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamThreshold(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 60, Set Camera boresight
 * @details Set Camera boresight pixel location
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamBoresight(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_CamBoresight *setVal);

/**
 * @brief ID 61, Setup Image Transfer
 * @details Setup image transfer details
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setImageTransferSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_ImageTransferSetup *setVal);

/**
 * @brief ID 62, Clear overcurrent flags
 * @details Clear overcurrent flags
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setClearOvercurrentFlags(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 63, Capture and detect
 * @details Capture image and perform detection
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCaptureDetect(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 65, CAM Distortion
 * @details Distortion coefficients for CAM
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamLensDistortion(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_CamLensDistortion *setVal);

/**
 * @brief ID 66, Detect Only
 * @details Performs sun detection only
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setDetect(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 67, Capture Image
 * @details Capture image to specified location
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setImageCapture(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_LocSelection setVal);

/**
 * @brief ID 69, Set Sensor Masking Area
 * @details Specify which areas of sensor to mask
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_setCamMask(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_CamMask *setVal);


 /* GET function prototypes */

/**
 * @brief ID 187, Set Camera boresight
 * @details Set Camera boresight pixel location
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCamBoresight(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_CamBoresight* returnVal);

/**
 * @brief ID 189, Sensor Results Trigger
 * @details Sensor Results with Auto-trigger
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getSensorResultTrigger(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_SensorResultTrigger* returnVal);

/**
 * @brief ID 191, Request Masking Areas
 * @details 5 masked areas each specified by 4 coordinates
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCamMasks(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_CamMasks* returnVal);

/**
 * @brief ID 192, Sensor results timestamp
 * @details Timestamp of last results
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getSensorResultsTimestamp(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_SensorResultsTimestamp* returnVal);

/**
 * @brief ID 193, CAM Distortion
 * @details Distortion coefficients for CAM
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getCamLensDistortion(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_CamLensDistortion* returnVal);

/**
 * @brief ID 195, Sensor results
 * @details Sensor results
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getSensorResults(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_SensorResults* returnVal);

/**
 * @brief ID 196, Auto Cam Sensor Raw
 * @details Raw pixel values for calibration perposes
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getAutoCamSensorRaw(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseControlProgram5_AutoCamSensorRaw* returnVal);

/**
 * @brief ID 197, Detection Area Row
 * @details Detection Area Row (25 pixels)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseControlProgram5_getDetectionAreaRow(TypeDef_TctlmEndpoint *endpoint, U8 *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_SENSE_CONTROL_PROGRAM_5_H
