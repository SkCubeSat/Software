/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_QUAD_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_QUAD_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCubeNodeControlProgramPst3sCommonEnums.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCubeNodeControlProgramPst3sCommon1.h"
#include "tctlmCubeNodeCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief PST3S Port Map message structure
 * @details Mapping of connected PST3S(s) from port to STRx (there should not be duplicates, the unused port(s) should be INVALID)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sPortMapStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strPort1;    /**< Assigns an STR handle to the PST3S connected to port 1  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strPort2;    /**< Assigns an STR handle to the PST3S connected to port 2  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strPort3;    /**< Assigns an STR handle to the PST3S connected to port 3  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strPort4;    /**< Assigns an STR handle to the PST3S connected to port 4  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sPortMap;

/**
 * @brief PST3S RAW TLM STR1 message structure
 * @details Get PST3S TLM Packet from STR1. Triggers TLM Request
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm1Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]. valid range is between 0 S and 1 S) */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVersion;                                                                              /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm1;

/**
 * @brief PST3S RAW TLM STR2 message structure
 * @details Get PST3S TLM Packet from STR2. Triggers TLM Request
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm2Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]. valid range is between 0 S and 1 S) */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVersion;                                                                              /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm2;

/**
 * @brief PST3S RAW TLM STR3 message structure
 * @details Get PST3S TLM Packet from STR3. Triggers TLM Request
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm3Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]. valid range is between 0 S and 1 S) */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVersion;                                                                              /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm3;

/**
 * @brief PST3S Attitude Data STR1 message structure
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR1
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude1Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]) */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude1;

/**
 * @brief PST3S Attitude Data STR2 message structure
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR2
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude2Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]) */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude2;

/**
 * @brief PST3S Attitude Data STR3 message structure
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR3
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude3Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]) */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude3;

/**
 * @brief PST3S Housekeeping Data STR1 message structure
 * @details Get the Last Sampled PST3S Housekeeping related data from STR1
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping1Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVerion;                                                                               /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping1;

/**
 * @brief PST3S Housekeeping Data STR2 message structure
 * @details Get the Last Sampled PST3S Housekeeping related data from STR2
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping2Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVerion;                                                                               /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping2;

/**
 * @brief PST3S Housekeeping Data STR3 message structure
 * @details Get the Last Sampled PST3S Housekeeping related data from STR3
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping3Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVerion;                                                                               /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping3;

/**
 * @brief PST3S Config STR1 message structure
 * @details Get the Last Sampled PST3S Config related data from STR1
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig1Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig1;

/**
 * @brief PST3S Config STR2 message structure
 * @details Get the Last Sampled PST3S Config related data from STR2
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig2Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig2;

/**
 * @brief PST3S Config STR3 message structure
 * @details Get the Last Sampled PST3S Config related data from STR3
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig3Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig3;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 56, PST3S Port Map
 * @details Mapping of connected PST3S(s) from port to STRx (there should not be duplicates, the unused port(s) should be INVALID)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_setPst3sPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sPortMap *setVal);


 /* GET function prototypes */

/**
 * @brief ID 183, PST3S Config STR2
 * @details Get the Last Sampled PST3S Config related data from STR2
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sConfig2(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig2* returnVal);

/**
 * @brief ID 184, PST3S Housekeeping Data STR3
 * @details Get the Last Sampled PST3S Housekeeping related data from STR3
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sHousekeeping3(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping3* returnVal);

/**
 * @brief ID 185, PST3S Housekeeping Data STR1
 * @details Get the Last Sampled PST3S Housekeeping related data from STR1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sHousekeeping1(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping1* returnVal);

/**
 * @brief ID 186, PST3S Attitude Data STR2
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR2
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sAttitude2(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude2* returnVal);

/**
 * @brief ID 187, PST3S RAW TLM STR3
 * @details Get PST3S TLM Packet from STR3. Triggers TLM Request
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sTlm3(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm3* returnVal);

/**
 * @brief ID 188, PST3S RAW TLM STR1
 * @details Get PST3S TLM Packet from STR1. Triggers TLM Request
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sTlm1(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm1* returnVal);

/**
 * @brief ID 197, PST3S Port Map
 * @details Mapping of connected PST3S(s) from port to STRx (there should not be duplicates, the unused port(s) should be INVALID)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sPortMap* returnVal);

/**
 * @brief ID 198, PST3S RAW TLM STR2
 * @details Get PST3S TLM Packet from STR2. Triggers TLM Request
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sTlm2(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sTlm2* returnVal);

/**
 * @brief ID 199, PST3S Attitude Data STR1
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sAttitude1(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude1* returnVal);

/**
 * @brief ID 200, PST3S Attitude Data STR3
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR3
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sAttitude3(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sAttitude3* returnVal);

/**
 * @brief ID 201, PST3S Housekeeping Data STR2
 * @details Get the Last Sampled PST3S Housekeeping related data from STR2
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sHousekeeping2(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sHousekeeping2* returnVal);

/**
 * @brief ID 202, PST3S Config STR1
 * @details Get the Last Sampled PST3S Config related data from STR1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sConfig1(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig1* returnVal);

/**
 * @brief ID 203, PST3S Config STR3
 * @details Get the Last Sampled PST3S Config related data from STR3
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsQuad1_getPst3sConfig3(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sQuad1_Pst3sConfig3* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_QUAD_1_H
