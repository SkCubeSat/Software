/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_COMPUTER_COMMON_3__H
#define TCTLM_CUBE_COMPUTER_COMMON_3__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_PowerSelect
*/
typedef enum TctlmCubeComputerCommon3_PowerSelectEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__POWER_OFF = 0,            /**< Off */
    TCTLM_CUBE_COMPUTER_COMMON_3__POWER_ON = 1,             /**< On */
    TCTLM_CUBE_COMPUTER_COMMON_3__POWER_NO_CHANGE = 2,      /**< NoChange */
    TCTLM_CUBE_COMPUTER_COMMON_3__POWER_AUTO = 3,           /**< Auto */
    TCTLM_CUBE_COMPUTER_COMMON_3__POWER_ON_PASS = 4,        /**< On - Passthrough Only (No ADCS operations) */
    TCTLM_CUBE_COMPUTER_COMMON_3__POWER_OFF_UPGRADE = 5,    /**< Power off for upgrade (internal use only) */
} TctlmCubeComputerCommon3_PowerSelect;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_ImageTransferOpCode
*/
typedef enum TctlmCubeComputerCommon3_ImageTransferOpCodeEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__CAPTURE_STORE = 0,       /**< Capture an image from the target node and store it on CubeComputer */
    TCTLM_CUBE_COMPUTER_COMMON_3__CAPTURE_DOWNLOAD = 1,    /**< Capture an image from the target node and immediately download it without storing it on CubeComputer */
    TCTLM_CUBE_COMPUTER_COMMON_3__DOWNLOAD = 2,            /**< Download an image stored on CubeComputer */
    TCTLM_CUBE_COMPUTER_COMMON_3__INFO_RESET = 3,          /**< Reset the file info request to start from the first image file */
} TctlmCubeComputerCommon3_ImageTransferOpCode;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_ImageTransferState
*/
typedef enum TctlmCubeComputerCommon3_ImageTransferStateEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__STATE_IDLE = 0,             /**< Idle */
    TCTLM_CUBE_COMPUTER_COMMON_3__STATE_BUSY_STORE = 1,       /**< Node image is being sttored internally on CubeComputer */
    TCTLM_CUBE_COMPUTER_COMMON_3__STATE_BUSY_DOWNLOAD = 2,    /**< Node image is being downloaded from CubeComputer. This state applies to both direct downloads and downloads from storage */
} TctlmCubeComputerCommon3_ImageTransferState;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_EventReadQueueState
*/
typedef enum TctlmCubeComputerCommon3_EventReadQueueStateEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__EVT_READ_QIDLE = 0,        /**< Idle */
    TCTLM_CUBE_COMPUTER_COMMON_3__EVT_READ_QDOWNLOAD = 1,    /**< Event log download in progress */
    TCTLM_CUBE_COMPUTER_COMMON_3__EVT_READ_QERASE = 2,       /**< Event log erase is progress */
} TctlmCubeComputerCommon3_EventReadQueueState;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_TlmLogReadQueueState
*/
typedef enum TctlmCubeComputerCommon3_TlmLogReadQueueStateEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__TLM_READ_QIDLE = 0,        /**< Idle */
    TCTLM_CUBE_COMPUTER_COMMON_3__TLM_READ_QDOWNLOAD = 1,    /**< Telemetry log download in progress */
    TCTLM_CUBE_COMPUTER_COMMON_3__TLM_READ_QERASE = 2,       /**< Telemetry log erase is progress */
} TctlmCubeComputerCommon3_TlmLogReadQueueState;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_TlmLogReturnIntervalValues
*/
typedef enum TctlmCubeComputerCommon3_TlmLogReturnIntervalValuesEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL_200MS = 0,    /**< Apply 200ms return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL1S = 1,        /**< Apply 1s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL2S = 2,        /**< Apply 2s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL3S = 3,        /**< Apply 3s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL4S = 4,        /**< Apply 4s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL5S = 5,        /**< Apply 5s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL_10S = 6,      /**< Apply 10s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL_20S = 7,      /**< Apply 20s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL_50S = 8,      /**< Apply 50s return interval */
    TCTLM_CUBE_COMPUTER_COMMON_3__INTERVAL_100S = 9,     /**< Apply 100s return interval */
} TctlmCubeComputerCommon3_TlmLogReturnIntervalValues;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_EraseMagicNumbers
*/
typedef enum TctlmCubeComputerCommon3_EraseMagicNumbersEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__ERASE_TLM_LOG = 57,       /**< Erase the Telemetry log */
    TCTLM_CUBE_COMPUTER_COMMON_3__ERASE_EVENT_LOG = 117,    /**< Erase the Event log */
    TCTLM_CUBE_COMPUTER_COMMON_3__ERASE_IMAGE_LOG = 195,    /**< Erase the Image log */
} TctlmCubeComputerCommon3_EraseMagicNumbers;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_EventClass
*/
typedef enum TctlmCubeComputerCommon3_EventClassEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__EVENT_CLASS_INFO = 0,             /**< Event class info */
    TCTLM_CUBE_COMPUTER_COMMON_3__EVENT_CLASS_WARNING_MINOR = 1,    /**< Event class warning minor */
    TCTLM_CUBE_COMPUTER_COMMON_3__EVENT_CLASS_WARNING_MAJOR = 2,    /**< Event class warning major */
    TCTLM_CUBE_COMPUTER_COMMON_3__EVENT_CLASS_CRITICAL = 3,         /**< Event class critical */
} TctlmCubeComputerCommon3_EventClass;

/**
 * @brief Enumeration for TctlmCubeComputerCommon3_LogReadFilterType
*/
typedef enum TctlmCubeComputerCommon3_LogReadFilterTypeEnum {
    TCTLM_CUBE_COMPUTER_COMMON_3__FILTER_NONE = 0,              /**< Include all entries */
    TCTLM_CUBE_COMPUTER_COMMON_3__FILTER_TIME_SPAN = 1,         /**< Filter/read entries logged between two timestamps */
    TCTLM_CUBE_COMPUTER_COMMON_3__FILTER_TIME_NEXT_X = 2,       /**< Filter/read the next x entries logged following the sepecifed start timestamp */
    TCTLM_CUBE_COMPUTER_COMMON_3__FILTER_FIRST_X = 3,           /**< Filter/read the first x entries logged */
    TCTLM_CUBE_COMPUTER_COMMON_3__FILTER_LAST_X = 4,            /**< Filter/read the last x entries logged */
    TCTLM_CUBE_COMPUTER_COMMON_3__FILTER_COUNTER_NEXT_X = 5,    /**< Filter/read the next x entries logged following the specified write counter */
} TctlmCubeComputerCommon3_LogReadFilterType;

/**
 * @brief Power state message structure
 * @details Power state
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_PowerStateStruct {
    TctlmCubeComputerCommon3_PowerSelect rwl0Power;          /**< RWL0 power state  */
    TctlmCubeComputerCommon3_PowerSelect rwl1Power;          /**< RWL1 power state  */
    TctlmCubeComputerCommon3_PowerSelect rwl2Power;          /**< RWL2 power state  */
    TctlmCubeComputerCommon3_PowerSelect rwl3Power;          /**< RWL3 power state  */
    TctlmCubeComputerCommon3_PowerSelect mag0Power;          /**< MAG0 power state  */
    TctlmCubeComputerCommon3_PowerSelect mag1Power;          /**< MAG1 power state  */
    TctlmCubeComputerCommon3_PowerSelect gyro0Power;         /**< GYR0 power state  */
    TctlmCubeComputerCommon3_PowerSelect gyro1Power;         /**< GYR1 power state  */
    TctlmCubeComputerCommon3_PowerSelect fss0Power;          /**< FSS0 power state  */
    TctlmCubeComputerCommon3_PowerSelect fss1Power;          /**< FSS1 power state  */
    TctlmCubeComputerCommon3_PowerSelect fss2Power;          /**< FSS2 power state  */
    TctlmCubeComputerCommon3_PowerSelect fss3Power;          /**< FSS3 power state  */
    TctlmCubeComputerCommon3_PowerSelect hss0Power;          /**< HSS0 power state  */
    TctlmCubeComputerCommon3_PowerSelect hss1Power;          /**< HSS1 power state  */
    TctlmCubeComputerCommon3_PowerSelect str0Power;          /**< STR0 power state  */
    TctlmCubeComputerCommon3_PowerSelect str1Power;          /**< STR1 power state  */
    TctlmCubeComputerCommon3_PowerSelect extSensor0Power;    /**< ExtSensor0 power state  */
    TctlmCubeComputerCommon3_PowerSelect extSensor1Power;    /**< ExtSensor1 power state  */
    TctlmCubeComputerCommon3_PowerSelect extGyro0Power;      /**< EXTGYR0 power state  */
    TctlmCubeComputerCommon3_PowerSelect extGyro1Power;      /**< EXTGYR1 power state  */
} TctlmCubeComputerCommon3_PowerState;

/**
 * @brief Port Diagnostics message structure
 * @details Diagnostics relating to the inernal CubeConnect interface port
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_PortDiagnosticsStruct {
    U32 globalErrorCode;                  /**< Global Error Code for Port Interface Operations. Signaling an error with at least one of the ports.  */
    Boolean noneExpected;                 /**< Set if the expected nodes configuration is empty.  */
    Boolean noneDiscoveredError;          /**< Set if no nodes have been discovered. Please ensure nodes are connected  */
    Boolean expectedMatchError;           /**< Set if the nodes that have been discovered do not match the expected nodes. Please read all port parameters to diagnose.  */
    Boolean addrAssignError;              /**< Set if a CAN address could not be assigned to a node. Please read all port parameters to diagnose.  */
    Boolean abstractTypeError;            /**< Set if an abstract node type could not be resolved. Typically due to an unsupported number of a specific type of node being discovered. Please read all port parameters to diagnose.  */
    Boolean configPersistError;           /**< Set if the discovered nodes could not be written to flash.  */
    U32 sensor1ErrorCode;                 /**< Sensor 1 port - Error Code for Port Interface Operations.  */
    Boolean sensor1UnexpectedError;       /**< Sensor 1 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor1CommsError;            /**< Sensor 1 port - Set if a communications error ocurred.  */
    Boolean sensor1NodeTypeMatchError;    /**< Sensor 1 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor1SerialMatchError;      /**< Sensor 1 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor1AddrAssignError;       /**< Sensor 1 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor1AbstractTypeError;     /**< Sensor 1 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor1SerialResolveError;    /**< Sensor 1 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 sensor2ErrorCode;                 /**< Sensor 2 port - Error Code for Port Interface Operations.  */
    Boolean sensor2UnexpectedError;       /**< Sensor 2 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor2CommsError;            /**< Sensor 2 port - Set if a communications error ocurred.  */
    Boolean sensor2NodeTypeMatchError;    /**< Sensor 2 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor2SerialMatchError;      /**< Sensor 2 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor2AddrAssignError;       /**< Sensor 2 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor2AbstractTypeError;     /**< Sensor 2 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor2SerialResolveError;    /**< Sensor 2 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 sensor3ErrorCode;                 /**< Sensor 3 port - Error Code for Port Interface Operations.  */
    Boolean sensor3UnexpectedError;       /**< Sensor 3 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor3CommsError;            /**< Sensor 3 port - Set if a communications error ocurred.  */
    Boolean sensor3NodeTypeMatchError;    /**< Sensor 3 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor3SerialMatchError;      /**< Sensor 3 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor3AddrAssignError;       /**< Sensor 3 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor3AbstractTypeError;     /**< Sensor 3 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor3SerialResolveError;    /**< Sensor 3 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 sensor4ErrorCode;                 /**< Sensor 4 port - Error Code for Port Interface Operations.  */
    Boolean sensor4UnexpectedError;       /**< Sensor 4 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor4CommsError;            /**< Sensor 4 port - Set if a communications error ocurred.  */
    Boolean sensor4NodeTypeMatchError;    /**< Sensor 4 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor4SerialMatchError;      /**< Sensor 4 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor4AddrAssignError;       /**< Sensor 4 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor4AbstractTypeError;     /**< Sensor 4 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor4SerialResolveError;    /**< Sensor 4 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 sensor5ErrorCode;                 /**< Sensor 5 port - Error Code for Port Interface Operations.  */
    Boolean sensor5UnexpectedError;       /**< Sensor 5 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor5CommsError;            /**< Sensor 5 port - Set if a communications error ocurred.  */
    Boolean sensor5NodeTypeMatchError;    /**< Sensor 5 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor5SerialMatchError;      /**< Sensor 5 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor5AddrAssignError;       /**< Sensor 5 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor5AbstractTypeError;     /**< Sensor 5 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor5SerialResolveError;    /**< Sensor 5 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 sensor6ErrorCode;                 /**< Sensor 6 port - Error Code for Port Interface Operations.  */
    Boolean sensor6UnexpectedError;       /**< Sensor 6 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor6CommsError;            /**< Sensor 6 port - Set if a communications error ocurred.  */
    Boolean sensor6NodeTypeMatchError;    /**< Sensor 6 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor6SerialMatchError;      /**< Sensor 6 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor6AddrAssignError;       /**< Sensor 6 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor6AbstractTypeError;     /**< Sensor 6 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor6SerialResolveError;    /**< Sensor 6 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 sensor7ErrorCode;                 /**< Sensor 7 port - Error Code for Port Interface Operations.  */
    Boolean sensor7UnexpectedError;       /**< Sensor 7 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor7CommsError;            /**< Sensor 7 port - Set if a communications error ocurred.  */
    Boolean sensor7NodeTypeMatchError;    /**< Sensor 7 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor7SerialMatchError;      /**< Sensor 7 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor7AddrAssignError;       /**< Sensor 7 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor7AbstractTypeError;     /**< Sensor 7 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor7SerialResolveError;    /**< Sensor 7 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 sensor8ErrorCode;                 /**< Sensor 8 port - Error Code for Port Interface Operations.  */
    Boolean sensor8UnexpectedError;       /**< Sensor 8 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean sensor8CommsError;            /**< Sensor 8 port - Set if a communications error ocurred.  */
    Boolean sensor8NodeTypeMatchError;    /**< Sensor 8 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean sensor8SerialMatchError;      /**< Sensor 8 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean sensor8AddrAssignError;       /**< Sensor 8 port - Set if this port could not be assigned a CAN address.  */
    Boolean sensor8AbstractTypeError;     /**< Sensor 8 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean sensor8SerialResolveError;    /**< Sensor 8 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 wheel1ErrorCode;                  /**< Wheel 1 port - Error Code for Port Interface Operations.  */
    Boolean wheel1UnexpectedError;        /**< Wheel 1 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean wheel1CommsError;             /**< Wheel 1 port - Set if a communications error ocurred.  */
    Boolean wheel1NodeTypeMatchError;     /**< Wheel 1 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean wheel1SerialMatchError;       /**< Wheel 1 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean wheel1AddrAssignError;        /**< Wheel 1 port - Set if this port could not be assigned a CAN address.  */
    Boolean wheel1AbstractTypeError;      /**< Wheel 1 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean wheel1SerialResolveError;     /**< Wheel 1 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 wheel2ErrorCode;                  /**< Wheel 2 port - Error Code for Port Interface Operations.  */
    Boolean wheel2UnexpectedError;        /**< Wheel 2 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean wheel2CommsError;             /**< Wheel 2 port - Set if a communications error ocurred.  */
    Boolean wheel2NodeTypeMatchError;     /**< Wheel 2 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean wheel2SerialMatchError;       /**< Wheel 2 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean wheel2AddrAssignError;        /**< Wheel 2 port - Set if this port could not be assigned a CAN address.  */
    Boolean wheel2AbstractTypeError;      /**< Wheel 2 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean wheel2SerialResolveError;     /**< Wheel 2 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 wheel3ErrorCode;                  /**< Wheel 3 port - Error Code for Port Interface Operations.  */
    Boolean wheel3UnexpectedError;        /**< Wheel 3 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean wheel3CommsError;             /**< Wheel 3 port - Set if a communications error ocurred.  */
    Boolean wheel3NodeTypeMatchError;     /**< Wheel 3 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean wheel3SerialMatchError;       /**< Wheel 3 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean wheel3AddrAssignError;        /**< Wheel 3 port - Set if this port could not be assigned a CAN address.  */
    Boolean wheel3AbstractTypeError;      /**< Wheel 3 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean wheel3SerialResolveError;     /**< Wheel 3 port - Set if the serial number returned by the node could not be resolved to a node type.  */
    U32 wheel4ErrorCode;                  /**< Wheel 4 port - Error Code for Port Interface Operations.  */
    Boolean wheel4UnexpectedError;        /**< Wheel 4 port - Set if the node discovered on this port is not listed as an expected node.  */
    Boolean wheel4CommsError;             /**< Wheel 4 port - Set if a communications error ocurred.  */
    Boolean wheel4NodeTypeMatchError;     /**< Wheel 4 port - Set if the previously discovered node type no longer matches the node connected to the port.  */
    Boolean wheel4SerialMatchError;       /**< Wheel 4 port - Set if the previously discovered node serial number no longer matches the node connected to the port.  */
    Boolean wheel4AddrAssignError;        /**< Wheel 4 port - Set if this port could not be assigned a CAN address.  */
    Boolean wheel4AbstractTypeError;      /**< Wheel 4 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected.  */
    Boolean wheel4SerialResolveError;     /**< Wheel 4 port - Set if the serial number returned by the node could not be resolved to a node type.  */
} TctlmCubeComputerCommon3_PortDiagnostics;

/**
 * @brief Port Map message structure
 * @details This telemetry describes the nodes that have been discovered i.e. connected to CubeConnect
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_PortMapStruct {
    TctlmCommonFrameworkEnums_NodeType sensor1NodeType;            /**< Sensor 1 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor1AbstractType;    /**< Sensor 1 port - Abstract Node type identifier  */
    U32 sensor1SerialInt;                                          /**< Sensor 1 port - Serial Number Integer Respresentation  */
    U32 sensor1Address;                                            /**< Sensor 1 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType sensor2NodeType;            /**< Sensor 2 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor2AbstractType;    /**< Sensor 2 port - Abstract Node type identifier  */
    U32 sensor2SerialInt;                                          /**< Sensor 2 port - Serial Number Integer Respresentation  */
    U32 sensor2Address;                                            /**< Sensor 2 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType sensor3NodeType;            /**< Sensor 3 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor3AbstractType;    /**< Sensor 3 port - Abstract Node type identifier  */
    U32 sensor3SerialInt;                                          /**< Sensor 3 port - Serial Number Integer Respresentation  */
    U32 sensor3Address;                                            /**< Sensor 3 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType sensor4NodeType;            /**< Sensor 4 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor4AbstractType;    /**< Sensor 4 port - Abstract Node type identifier  */
    U32 sensor4SerialInt;                                          /**< Sensor 4 port - Serial Number Integer Respresentation  */
    U32 sensor4Address;                                            /**< Sensor 4 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType sensor5NodeType;            /**< Sensor 5 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor5AbstractType;    /**< Sensor 5 port - Abstract Node type identifier  */
    U32 sensor5SerialInt;                                          /**< Sensor 5 port - Serial Number Integer Respresentation  */
    U32 sensor5Address;                                            /**< Sensor 5 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType sensor6NodeType;            /**< Sensor 6 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor6AbstractType;    /**< Sensor 6 port - Abstract Node type identifier  */
    U32 sensor6SerialInt;                                          /**< Sensor 6 port - Serial Number Integer Respresentation  */
    U32 sensor6Address;                                            /**< Sensor 6 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType sensor7NodeType;            /**< Sensor 7 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor7AbstractType;    /**< Sensor 7 port - Abstract Node type identifier  */
    U32 sensor7SerialInt;                                          /**< Sensor 7 port - Serial Number Integer Respresentation  */
    U32 sensor7Address;                                            /**< Sensor 7 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType sensor8NodeType;            /**< Sensor 8 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode sensor8AbstractType;    /**< Sensor 8 port - Abstract Node type identifier  */
    U32 sensor8SerialInt;                                          /**< Sensor 8 port - Serial Number Integer Respresentation  */
    U32 sensor8Address;                                            /**< Sensor 8 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType wheel1NodeType;             /**< Wheel 1 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode wheel1AbstractType;     /**< Wheel 1 port - Abstract Node type identifier  */
    U32 wheel1SerialInt;                                           /**< Wheel 1 port - Serial Number Integer Respresentation  */
    U32 wheel1Address;                                             /**< Wheel 1 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType wheel2NodeType;             /**< Wheel 2 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode wheel2AbstractType;     /**< Wheel 2 port - Abstract Node type identifier  */
    U32 wheel2SerialInt;                                           /**< Wheel 2 port - Serial Number Integer Respresentation  */
    U32 wheel2Address;                                             /**< Wheel 2 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType wheel3NodeType;             /**< Wheel 3 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode wheel3AbstractType;     /**< Wheel 3 port - Abstract Node type identifier  */
    U32 wheel3SerialInt;                                           /**< Wheel 3 port - Serial Number Integer Respresentation  */
    U32 wheel3Address;                                             /**< Wheel 3 port - CAN Address  */
    TctlmCommonFrameworkEnums_NodeType wheel4NodeType;             /**< Wheel 4 port - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode wheel4AbstractType;     /**< Wheel 4 port - Abstract Node type identifier  */
    U32 wheel4SerialInt;                                           /**< Wheel 4 port - Serial Number Integer Respresentation  */
    U32 wheel4Address;                                             /**< Wheel 4 port - CAN Address  */
} TctlmCubeComputerCommon3_PortMap;

/**
 * @brief Expected Nodes message structure
 * @details Lists the expected nodes config item
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_ExpectedNodesStruct {
    TctlmCommonFrameworkEnums_NodeType expected0NodeType;             /**< Slot 0 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected0AbstractType;     /**< Slot 0 - Abstract Node type identifier  */
    U32 expected0SerialInt;                                           /**< Slot 0 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected1NodeType;             /**< Slot 1 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected1AbstractType;     /**< Slot 1 - Abstract Node type identifier  */
    U32 expected1SerialInt;                                           /**< Slot 1 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected2NodeType;             /**< Slot 2 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected2AbstractType;     /**< Slot 2 - Abstract Node type identifier  */
    U32 expected2SerialInt;                                           /**< Slot 2 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected3NodeType;             /**< Slot 3 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected3AbstractType;     /**< Slot 3 - Abstract Node type identifier  */
    U32 expected3SerialInt;                                           /**< Slot 3 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected4NodeType;             /**< Slot 4 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected4AbstractType;     /**< Slot 4 - Abstract Node type identifier  */
    U32 expected4SerialInt;                                           /**< Slot 4 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected5NodeType;             /**< Slot 5 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected5AbstractType;     /**< Slot 5 - Abstract Node type identifier  */
    U32 expected5SerialInt;                                           /**< Slot 5 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected6NodeType;             /**< Slot 6 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected6AbstractType;     /**< Slot 6 - Abstract Node type identifier  */
    U32 expected6SerialInt;                                           /**< Slot 6 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected7NodeType;             /**< Slot 7 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected7AbstractType;     /**< Slot 7 - Abstract Node type identifier  */
    U32 expected7SerialInt;                                           /**< Slot 7 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected8NodeType;             /**< Slot 8 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected8AbstractType;     /**< Slot 8 - Abstract Node type identifier  */
    U32 expected8SerialInt;                                           /**< Slot 8 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected9NodeType;             /**< Slot 9 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected9AbstractType;     /**< Slot 9 - Abstract Node type identifier  */
    U32 expected9SerialInt;                                           /**< Slot 9 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected10NodeType;            /**< Slot 10 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected10AbstractType;    /**< Slot 10 - Abstract Node type identifier  */
    U32 expected10SerialInt;                                          /**< Slot 10 - Serial Number Integer Respresentation  */
    TctlmCommonFrameworkEnums_NodeType expected11NodeType;            /**< Slot 11 - Node type identifier  */
    TctlmCommonFrameworkEnums_AbstractNode expected11AbstractType;    /**< Slot 11 - Abstract Node type identifier  */
    U32 expected11SerialInt;                                          /**< Slot 11 - Serial Number Integer Respresentation  */
} TctlmCubeComputerCommon3_ExpectedNodes;

/**
 * @brief Get the Event log status response message structure
 * @details Get the Event log status response
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_EventLogStatusStruct {
    U16 numberOfEntriesQueued;                                      /**< The number of entries in the queue  */
    U16 numberOfEntriesBuffered;                                    /**< The number of buffered (unwritten) entries  */
    U32 numberOfEntries;                                            /**< The total number of entries contained in the event log (buffered + written)  */
    U32 numberOfEmptyEntries;                                       /**< The total number of empty entries contained in the event log (storage space with no data)  */
    U32 oldestEntryUnix;                                            /**< Timestamp of the oldest entry unix time in seconds  */
    U32 latestEntryUnix;                                            /**< Timestamp of the latest entry unix time in seconds  */
    U32 numberOfCriticalEvents;                                     /**< The total number of critical events contained in the event log  */
    U32 numberOfMajorWarningEvents;                                 /**< The total number of major warning events contained in the event log  */
    U32 numberOfMinorWarningEvents;                                 /**< The total number of minor warning events contained in the event log  */
    U32 numberOfInfoEvents;                                         /**< The total number of info events contained in the event log  */
    U32 writeCounter;                                               /**< The current event write counter  */
    TctlmCubeComputerCommon3_EventReadQueueState readQueueState;    /**< The state of the read queue  */
} TctlmCubeComputerCommon3_EventLogStatus;

/**
 * @brief Get the Telemtry log status response message structure
 * @details Get the Telemtry log status response
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_TelemtryLogStatusStruct {
    U8 numberOfEntriesQueued;                                        /**< The number of entries in the queue  */
    U8 numberOfTlmIterations;                                        /**< The number of telemetry request iterations performed for the current log entry (0-4)  */
    U32 numberOfEntries;                                             /**< The total number of entries contained in the telemetry log  */
    U32 oldestEntryUnix;                                             /**< Timestamp of the oldest entry unix time in seconds  */
    U32 latestEntryUnix;                                             /**< Timestamp of the latest entry unix time in seconds  */
    U32 writeCounter;                                                /**< The current event write counter  */
    TctlmCubeComputerCommon3_TlmLogReadQueueState readQueueState;    /**< The state of the read queue  */
} TctlmCubeComputerCommon3_TelemtryLogStatus;

/**
 * @brief Telemtry log inclusion masks message structure
 * @details Get the Telemtry log inclusion masks
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_TelemtryLogInclusionMasksStruct {
    U8 fastBitMask[5];    /**< Log ID inclusion bitmask for telemetry logged every 200ms  */
    U8 slowBitMask[5];    /**< Log ID inclusion bitmask for telemetry logged every 1s  */
} TctlmCubeComputerCommon3_TelemtryLogInclusionMasks;

/**
 * @brief Initiate Filtered Event Log Transfer message structure
 * @details Initiate event log transfer by specifying time range and data filter
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_EventLogFilterTransferSetupStruct {
    TctlmCubeComputerCommon3_LogReadFilterType filterType;    /**< Filter type to use when reading event logs  */
    U32 startTimeUnix;                                        /**< If using time span/next x filter - indicate the unix start time in seconds. All entries with a timestamp after this time will be included in the transfer.  */
    U32 endTimeUnix;                                          /**< If using time span filter - indicate the unix end time in seconds. All entries with a timestamp before this time will be included in the transfer.  */
    U32 numEntries;                                           /**< If using time next-x or first/last-x or counter next-x filter - indicate the number of entries to transfer.  */
    U32 writeCounter;                                         /**< If using counter next-x filter - indicate the reference write counter value.  */
    Boolean includeClassCritical;                             /**< Include critical events in transfer Event Log  */
    Boolean includeClassMajorWarning;                         /**< Include major warning events in transfer Event Log  */
    Boolean includeClassMinorWarning;                         /**< Include minor warning events in transfer Event Log  */
    Boolean includeClassInfo;                                 /**< Include info events in transfer Event Log  */
    Boolean includeSourceCubeComputer;                        /**< Include the CubeComputer as a source for events  */
    Boolean includeSourceRwl0;                                /**< Include the RWL 0 as a source for events  */
    Boolean includeSourceRwl1;                                /**< Include the RWL 1 as a source for events  */
    Boolean includeSourceRwl2;                                /**< Include the RWL 2 as a source for events  */
    Boolean includeSourceRwl3;                                /**< Include the RWL 3 as a source for events  */
    Boolean includeSourceFss0;                                /**< Include the Fss 0 as a source for events  */
    Boolean includeSourceFss1;                                /**< Include the Fss 1 as a source for events  */
    Boolean includeSourceFss2;                                /**< Include the Fss 2 as a source for events  */
    Boolean includeSourceFss3;                                /**< Include the Fss 3 as a source for events  */
    Boolean includeSourceHss0;                                /**< Include the Hss 0 as a source for events  */
    Boolean includeSourceHss1;                                /**< Include the Hss 1 as a source for events  */
    Boolean includeSourceStr0;                                /**< Include the Str 0 as a source for events  */
    Boolean includeSourceStr1;                                /**< Include the Str 1 as a source for events  */
    Boolean includeSourceMag0;                                /**< Include the Mag 0 as a source for events  */
    Boolean includeSourceMag1;                                /**< Include the Mag 1 as a source for events  */
    Boolean includeSourceExt0;                                /**< Include the External 0 as a source for events  */
    Boolean includeSourceExt1;                                /**< Include the External 1 as a source for events  */
} TctlmCubeComputerCommon3_EventLogFilterTransferSetup;

/**
 * @brief Set request telemetry log transfer setup message structure
 * @details Set request telemetry log transfer setup
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_TelemetryLogTransferSetupStruct {
    TctlmCubeComputerCommon3_LogReadFilterType filterType;                       /**< Filter type to use when reading tlm logs  */
    U32 startTimeUnix;                                                           /**< Indicate the unix start time in seconds. All entries with a timestamp after this time will be included in the transfer.  */
    U32 endTimeUnix;                                                             /**< Indicate the unix start end in seconds. All entries with a timestamp before this time will be included in the transfer.  */
    U32 numEntries;                                                              /**< If using time next-x or first/last-x or counter next-x filter - indicate the number of entries to transfer.  */
    U32 writeCounter;                                                            /**< If using counter next-x filter - indicate the reference write counter value.  */
    TctlmCubeComputerCommon3_TlmLogReturnIntervalValues tlmLogReturnInterval;    /**< Indicate how many samples to exclude between transferred samples  */
    U8 logIdBitmask[5];                                                          /**< Indicate which log IDs must be included in the transfered Telemetry Log  */
} TctlmCubeComputerCommon3_TelemetryLogTransferSetup;

/**
 * @brief Unsolicited Event Message Setup message structure
 * @details Setup unsolicited event messages
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_UnsolicitedEventSetupStruct {
    Boolean uartInfo;          /**< Output Info class events to UART  */
    Boolean uartWarnMinor;     /**< Output minor warning class events to UART  */
    Boolean uartWarnMajor;     /**< Output major warning class events to UART  */
    Boolean uartCritical;      /**< Output critical class events to UART2  */
    Boolean uart2Info;         /**< Output Info class events to UART2  */
    Boolean uart2WarnMinor;    /**< Output minor warning class events to UART2  */
    Boolean uart2WarnMajor;    /**< Output major warning class events to UART2  */
    Boolean uart2Critical;     /**< Output critical class events to UART2  */
    Boolean canInfo;           /**< Output Info class events to CAN  */
    Boolean canWarnMinor;      /**< Output minor warning class events to CAN  */
    Boolean canWarnMajor;      /**< Output major warning class events to CAN  */
    Boolean canCritical;       /**< Output critical class events to CAN  */
} TctlmCubeComputerCommon3_UnsolicitedEventSetup;

/**
 * @brief Unsolicited Telemetry Message Setup message structure
 * @details Inclusion bitmask for unsolicited telemetry
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_UnsolicitedTlmSetupStruct {
    TctlmCubeComputerCommon3_TlmLogReturnIntervalValues uartTlmInterval;     /**< Indicate how frequently unsolicited telemetry is transmitted on the UART interface  */
    TctlmCubeComputerCommon3_TlmLogReturnIntervalValues uart2TlmInterval;    /**< Indicate how frequently unsolicited telemetry is transmitted on the UART2 interface  */
    TctlmCubeComputerCommon3_TlmLogReturnIntervalValues canTlmInterval;      /**< Indicate how frequently unsolicited telemetry is transmitted on the CAN interface  */
    U8 uartTlmIdBitmask[5];                                                  /**< Indicate which TLM IDs must be included in the transfered Telemetry on the UART interface  */
    U8 uart2TlmIdBitmask[5];                                                 /**< Indicate which TLM IDs must be included in the transfered Telemetry on the UART2 interface  */
    U8 canTlmIdBitmask[5];                                                   /**< Indicate which TLM IDs must be included in the transfered Telemetry on the CAN interface  */
} TctlmCubeComputerCommon3_UnsolicitedTlmSetup;

/**
 * @brief Set a dummy event message structure
 * @details Set a dummy event to be stored in the event log
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_DummyEventStruct {
    TctlmCubeComputerCommon3_EventClass eventClass;        /**< This field contains the class of the event  */
    TctlmCommonFrameworkEnums_AbstractNode eventSource;    /**< This field contains the source of the event  */
    U16 eventType;                                         /**< This field contains the type of the event  */
    U8 eventData[8];                                       /**< This field contains the data of the event  */
} TctlmCubeComputerCommon3_DummyEvent;

/**
 * @brief Set request image log transfer setup message structure
 * @details Set request image log transfer setup
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_ImageTransferSetupStruct {
    TctlmCubeComputerCommon3_ImageTransferOpCode opCode;    /**< Operation code.  */
    TctlmCommonFrameworkEnums_AbstractNode nodeType;        /**< Target node type for image storage and download direct operation codes.  */
    U32 fileHandle;                                         /**< Target file for download and info operation codes.  */
} TctlmCubeComputerCommon3_ImageTransferSetup;

/**
 * @brief Image Transfer Status message structure
 * @details Image Transfer Status
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_ImageTransferStatusStruct {
    TctlmCubeComputerCommon3_ImageTransferState state;    /**< State  */
    U32 errorCode;                                        /**< Operation Error Code. Non-Zero = ERROR  */
    U32 transferSize;                                     /**< Size of the transfer  */
    U32 dataRemain;                                       /**< Amount of data still to be transfered  */
    Boolean invalidNodeError;                             /**< Set if the target node is invalid  */
    Boolean timeoutError;                                 /**< Set if transfer timeout reached  */
    Boolean captureError;                                 /**< Set if the target node failed to capture image invalid  */
    Boolean setupError;                                   /**< Set if the target node failed to set up image transfer  */
    Boolean fileOpenReadError;                            /**< Set if error occured when opening storage file for reading  */
    Boolean fileOpenWriteError;                           /**< Set if error occured when opening storage file for writing  */
    Boolean fileReadError;                                /**< Set if error occured while reading from storage file  */
    Boolean fileWriteError;                               /**< Set if error occured while writing to storage file  */
    Boolean busyError;                                    /**< Set if there is already an ongoing transfer when attempting to store an image.  */
} TctlmCubeComputerCommon3_ImageTransferStatus;

/**
 * @brief Image File Info message structure
 * @details Stored image file information
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_ImageFileInfoStruct {
    U32 fileHandle;                                     /**< File handle of this file.  */
    TctlmCommonFrameworkEnums_AbstractNode nodeType;    /**< The node that this file was sourced from.  */
    U32 timestamp;                                      /**< Timestamp of when this file was stored.  */
    U32 size;                                           /**< Size of the file in bytes.  */
    Boolean first;                                      /**< Set if this file is the first stored image.  */
    Boolean last;                                       /**< Set if this file is the last stored image. If set, subsequent requests will wrap to the first file.  */
    Boolean isValid;                                    /**< Set if this file's Meta data was CRC-validated.  */
} TctlmCubeComputerCommon3_ImageFileInfo;

/**
 * @brief Component Error Codes message structure
 * @details Error codes common to CubeComputer bootloader and control-program
 */
typedef struct TCTLM_PACKED TctlmCubeComputerCommon3_ComponentErrorCodesStruct {
    U32 masterSvc;      /**< Tctlm comms master service error code (node comms)  */
    U32 framFsSvc;      /**< FRAM file system error code.  */
    U32 eventLogSvc;    /**< Event log service error code.  */
    U32 imgLogSvc;      /**< Image log service error code.  */
    U32 tlmLogSvc;      /**< Telemetry log service error code.  */
    U32 imuSvc;         /**< IMU/Gyro service error code.  */
} TctlmCubeComputerCommon3_ComponentErrorCodes;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 56, Power state
 * @details Power state
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setPowerState(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_PowerState *setVal);

/**
 * @brief ID 99, Pass Through 
 * @details TCTLM Passthrough settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setPassThrough(TypeDef_TctlmEndpoint *endpoint, TctlmCommonFrameworkEnums_AbstractNode setVal);

/**
 * @brief ID 111, Port Map
 * @details This telemetry describes the nodes that have been discovered i.e. connected to CubeConnect
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_PortMap *setVal);

/**
 * @brief ID 112, Unsolicited Telemetry Message Setup
 * @details Inclusion bitmask for unsolicited telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setUnsolicitedTlmSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_UnsolicitedTlmSetup *setVal);

/**
 * @brief ID 113, Reset Image File Info Index
 * @details Resets image file info index
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setImageFileInfoReset(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 114, Set request image log transfer setup
 * @details Set request image log transfer setup
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setImageTransferSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_ImageTransferSetup *setVal);

/**
 * @brief ID 115, Set a dummy event
 * @details Set a dummy event to be stored in the event log
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setDummyEvent(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_DummyEvent *setVal);

/**
 * @brief ID 116, Unsolicited Event Message Setup
 * @details Setup unsolicited event messages
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setUnsolicitedEventSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_UnsolicitedEventSetup *setVal);

/**
 * @brief ID 117, Set request telemetry log transfer setup
 * @details Set request telemetry log transfer setup
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setTelemetryLogTransferSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_TelemetryLogTransferSetup *setVal);

/**
 * @brief ID 120, Initiate Filtered Event Log Transfer
 * @details Initiate event log transfer by specifying time range and data filter
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setEventLogFilterTransferSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_EventLogFilterTransferSetup *setVal);

/**
 * @brief ID 122, Format all logs
 * @details Format all logs
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_setEraseLogData(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_EraseMagicNumbers setVal);


 /* GET function prototypes */

/**
 * @brief ID 183, Power state
 * @details Power state
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getPowerState(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_PowerState* returnVal);

/**
 * @brief ID 227, Telemtry log inclusion masks
 * @details Get the Telemtry log inclusion masks
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getTelemtryLogInclusionMasks(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_TelemtryLogInclusionMasks* returnVal);

/**
 * @brief ID 228, Unsolicited Telemetry Message Setup
 * @details Inclusion bitmask for unsolicited telemetry
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getUnsolicitedTlmSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_UnsolicitedTlmSetup* returnVal);

/**
 * @brief ID 229, Pass Through 
 * @details TCTLM Passthrough settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getPassThrough(TypeDef_TctlmEndpoint *endpoint, TctlmCommonFrameworkEnums_AbstractNode *returnVal);

/**
 * @brief ID 230, Component Error Codes
 * @details Error codes common to CubeComputer bootloader and control-program
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getComponentErrorCodes(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_ComponentErrorCodes* returnVal);

/**
 * @brief ID 231, Image File Info
 * @details Stored image file information
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getImageFileInfo(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_ImageFileInfo* returnVal);

/**
 * @brief ID 232, Image Transfer Status
 * @details Image Transfer Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getImageTransferStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_ImageTransferStatus* returnVal);

/**
 * @brief ID 233, Unsolicited Event Message Setup
 * @details Setup unsolicited event messages
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getUnsolicitedEventSetup(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_UnsolicitedEventSetup* returnVal);

/**
 * @brief ID 234, Get the Telemtry log status response
 * @details Get the Telemtry log status response
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getTelemtryLogStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_TelemtryLogStatus* returnVal);

/**
 * @brief ID 235, Get the Event log status response
 * @details Get the Event log status response
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getEventLogStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_EventLogStatus* returnVal);

/**
 * @brief ID 238, Expected Nodes
 * @details Lists the expected nodes config item
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getExpectedNodes(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_ExpectedNodes* returnVal);

/**
 * @brief ID 239, Port Map
 * @details This telemetry describes the nodes that have been discovered i.e. connected to CubeConnect
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_PortMap* returnVal);

/**
 * @brief ID 240, Port Diagnostics
 * @details Diagnostics relating to the inernal CubeConnect interface port
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeComputerCommon3_getPortDiagnostics(TypeDef_TctlmEndpoint *endpoint, TctlmCubeComputerCommon3_PortDiagnostics* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_COMPUTER_COMMON_3_H
