/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCubeNodeControlProgramNssrwlCommonEnums.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwlCommon1_NodeState
*/
typedef enum TctlmCubeNodeControlProgramNssrwlCommon1_NodeStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NODE_OFF = 0,            /**< Node is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NODE_IDLE = 1,           /**< Node is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NODE_NSS_RWL_PWR = 2,    /**< Node is powering on or off one or more NSSRWL's */
} TctlmCubeNodeControlProgramNssrwlCommon1_NodeState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlState
*/
typedef enum TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_OFF = 0,      /**< PSST3S is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_BOOT = 1,     /**< PSST3S is Booting */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_IDLE = 2,     /**< PSST3S is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_AUTO = 3,     /**< NSSRWL is Auto-Sampling */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NSS_RWL_ERROR = 4,    /**< NSSRWL is in an Error State */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState
*/
typedef enum TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__POWERED_NO_CHANGE = 0,    /**< No change */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__POWERED_OFF = 1,          /**< NSSRWL Power Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__POWERED_ON = 2,           /**< NSSRWL Power On */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms
*/
typedef enum TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmsEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__NONE = 0,                    /**< No TcTlm history */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_MOTOR_CURRENT = 1,       /**< Set Motor Current */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_WHEEL_SPEED = 2,         /**< Set Wheel Speed Reference */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_TORQUE = 3,              /**< Set Torquw */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__GET_TLM_STANDARD = 4,        /**< Get Standard Telemetry */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__GET_TLM_EXTENDED = 5,        /**< Get Extended Telemetry */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__GET_TLM_SYSTEM = 6,          /**< Get System Telemetry */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_SOFTWARE_RESET = 7,      /**< Set Software Reset */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__SET_SOFTWARE_EXECUTE = 8,    /**< Set Software Execute */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult
*/
typedef enum TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResultEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__TC_TLM_NONE = 0,          /**< No Transaction Yet */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ACK = 1,                  /**< Successful Ack on last transaction */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ERROR_ECHO_MATCH = 2,     /**< Command byte not successfully echo'd */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ERROR_ECHO_LENGTH = 3,    /**< Echo response length is greater than transmitted data length */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__ERROR_TLM_ACK = 4,        /**< No Ack byte received in tlm data block */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__TIMEOUT = 5,              /**< Timeout */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__TXERROR = 6,              /**< Uart Tx Error */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__RXERROR = 7,              /**< Uart Rx Error */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSource
*/
typedef enum TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSourceEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__STANDARD_TLM = 0,    /**< Standard telemetry is auto-sampled */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1__EXTENDED_TLM = 1,    /**< Extended telemetry is auto-sampled */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSource;

/**
 * @brief NSSRWL Power State message structure
 * @details Set the NSSRWL Power State
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerStruct {
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState powerRwl0;    /**< RWL0 Power State  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState powerRwl1;    /**< RWL1 Power State  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState powerRwl2;    /**< RWL2 Power State  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPowerState powerRwl3;    /**< RWL3 Power State  */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPower;

/**
 * @brief NSSRWL Service Settings message structure
 * @details Set/Get the NSSRWL Service Settings
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettingsStruct {
    U32 maxTcTlmErrors;                                                          /**< NSSRWL Maximum Number of TcTlm Errors Before Entering Error State  */
    U8 sampleFrequency;                                                          /**< NSSRWL Sample Frequency  (measurment unit is [Hz]. valid range is between 1 Hz and 50 Hz) */
    Boolean autoSample;                                                          /**< NSSRWL Auto-Sample Enable/Disable  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSampleSource sampleSource;    /**< Selects which telemetry is sampled for wheel speed  */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettings;

/**
 * @brief Node Service Status message structure
 * @details Node Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NodeSvcStatusStruct {
    TctlmCubeNodeControlProgramNssrwlCommon1_NodeState nodeState;    /**< CubeNode Node Service State  */
    U32 bootErrorCodeRwl0;                                           /**< RWL0 Boot Error Code  */
    U32 bootErrorCodeRwl1;                                           /**< RWL1 Boot Error Code  */
    U32 bootErrorCodeRwl2;                                           /**< RWL2 Boot Error Code  */
    U32 bootErrorCodeRwl3;                                           /**< RWL3 Boot Error Code  */
} TctlmCubeNodeControlProgramNssrwlCommon1_NodeSvcStatus;

/**
 * @brief NSSRWL Service Status message structure
 * @details NSSRWL Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSvcStatusStruct {
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlState stateRwl0;                          /**< RWL0 Service State  */
    U32 failureCountRwl0;                                                                    /**< RWL0 TcTlm Failure Count  */
    U32 failureCountLastSuccessRwl0;                                                         /**< RWL0 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms lastTransactionRwl0;               /**< RWL0 Last Transaction  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult lastTransactionResultRwl0;    /**< RWL0 Last Transaction Result  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlState stateRwl1;                          /**< RWL1 Service State  */
    U32 failureCountRwl1;                                                                    /**< RWL1 TcTlm Failure Count  */
    U32 failureCountLastSuccessRwl1;                                                         /**< RWL1 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms lastTransactionRwl1;               /**< RWL1 Last Transaction  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult lastTransactionResultRwl1;    /**< RWL1 Last Transaction Result  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlState stateRwl2;                          /**< RWL2 Service State  */
    U32 failureCountRwl2;                                                                    /**< RWL2 TcTlm Failure Count  */
    U32 failureCountLastSuccessRwl2;                                                         /**< RWL2 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms lastTransactionRwl2;               /**< RWL2 Last Transaction  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult lastTransactionResultRwl2;    /**< RWL2 Last Transaction Result  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlState stateRwl3;                          /**< RWL3 Service State  */
    U32 failureCountRwl3;                                                                    /**< RWL3 TcTlm Failure Count  */
    U32 failureCountLastSuccessRwl3;                                                         /**< RWL3 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlms lastTransactionRwl3;               /**< RWL3 Last Transaction  */
    TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTcTlmResult lastTransactionResultRwl3;    /**< RWL3 Last Transaction Result  */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSvcStatus;

/**
 * @brief Wheel Reference Speed message structure
 * @details Set momentum wheel reference speed
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedRefStruct {
    TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle rwlHandle;    /**< Target RWL instance for reference speed  */
    F32 speedRef;                                                           /**< Wheel reference speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedRef;

/**
 * @brief Torque message structure
 * @details Set torque
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTorqueStruct {
    TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle rwlHandle;    /**< Target RWL instance for torque  */
    F32 torque;                                                             /**< Torque  (measurment unit is [mNm]. valid range is between -25 mNm and 25 mNm) */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTorque;

/**
 * @brief Motor Current message structure
 * @details Set motor current
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlMotorCurrentStruct {
    TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle rwlHandle;    /**< Target RWL instance for motor current  */
    F32 current;                                                            /**< Current  (measurment unit is [mA]. valid range is between -3000 mA and 3000 mA) */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlMotorCurrent;

/**
 * @brief Wheel Speed All message structure
 * @details Wheel speed measurement for all wheels (does not depend on instance selection)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedAllStruct {
    F32 speedRwl0;    /**< Wheel speed measurement for RWL0  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 speedRwl1;    /**< Wheel speed measurement for RWL1  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 speedRwl2;    /**< Wheel speed measurement for RWL2  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 speedRwl3;    /**< Wheel speed measurement for RWL3  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedAll;

/**
 * @brief Raw NSSRWL Standard TLM RWL0 message structure
 * @details Get NSSRWL Standard TLM Packet from RWL0
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmStandard0Struct {
    U8 serialNumber;               /**< Serial Number  */
    F32 targetValue;               /**< Target Value  (valid range is between -10000  and 10000 ) */
    F32 actualWheelSpeed;          /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 actualMotorCurrent;        /**< Actual Motor current  (measurment unit is [mA]. valid range is between 0 mA and 20000 mA) */
    F32 temperature;               /**< Temperature  (measurment unit is [C]. valid range is between -273 C and 273 C) */
    F32 iSignal;                   /**< I-Signal (loop)  (valid range is between -10000  and 10000 ) */
    Boolean reactionWheelMode;     /**< Set if Reaction Wheel mode is On  */
    Boolean currentControlMode;    /**< Set if Current Control mode is Active  */
    Boolean speedControlMode;      /**< Set if Speed Control mode is Active  */
    Boolean torqueMode;            /**< Set if Torque mode is Active  */
    Boolean wheelGyroMode;         /**< Set if Wheel/Gyro mode is On  */
    Boolean omegaPiControlLoop;    /**< Set if Omega-PI Control Loop is Active  */
    Boolean anglePdControlLoop;    /**< Set if Angle-PD Control Loop is Active  */
    Boolean bootControl;           /**< Set if Boot Control is Active  */
    Boolean gyroConnected;         /**< Set if Gyro Connected  */
    Boolean gyroTelemetry;         /**< Set if Gyro Telemetry is On  */
    Boolean gyroFlagRegister;      /**< Set if Gyro Flag Register is not zero  */
    Boolean crcError;              /**< Set if CRC Error Protected Area  */
    Boolean wrongLlCommand;        /**< Set if Wrong Low-Level Command  */
    Boolean wrongHlCommand;        /**< Set if Wrong High-Level Command  */
    Boolean toutSci1Main;          /**< Set if Timeout on SCI1 Main Interface  */
    Boolean toutSci2Gyro;          /**< Set if Timeout on SCI2 Gyro Interface  */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmStandard0;

/**
 * @brief Raw NSSRWL Extended TLM RWL0 message structure
 * @details Get NSSRWL Extended TLM Packet from RWL0
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmExtended0Struct {
    U8 serialNumber;         /**< Serial Number  */
    F32 actualWheelSpeed;    /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmExtended0;

/**
 * @brief Raw NSSRWL System TLM RWL0 message structure
 * @details Get NSSRWL System TLM Packet from RWL0
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmSystem0Struct {
    U8 serialNumber;          /**< Serial Number  */
    U8 deviceType;            /**< Device Type  */
    U8 deviceId;              /**< Device ID  */
    U8 month;                 /**< Month  */
    U8 year;                  /**< Year  */
    U16 statusRegister;       /**< Status Register  */
    U16 acsRegister;          /**< ACS Flag Register  */
    U16 systemRegister;       /**< System Flag Register  */
    U16 rwaRegister;          /**< RWA Flag Register  */
    U8 gyroRegister;          /**< Gyro Flag Register  */
    U16 bootFlag;             /**< Boot Flag  */
    U16 bootVector;           /**< Boot Vector  */
    U8 acsControlInterval;    /**< ACS Control Interval  (measurment unit is [10.24ms]) */
    U16 acsStartAddr;         /**< Actual start address ACS boot control  */
    U16 tachoStartAddr;       /**< Actual start address Tacho control  */
} TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmSystem0;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 61, NSSRWL Software Reset
 * @details Set the NSSRWL Software Reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_setNssRwlSoftwareReset(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle setVal);

/**
 * @brief ID 62, Torque
 * @details Set torque
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_setNssRwlTorque(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTorque *setVal);

/**
 * @brief ID 63, NSSRWL Power State
 * @details Set the NSSRWL Power State
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_setNssRwlPower(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlPower *setVal);

/**
 * @brief ID 64, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_setNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);

/**
 * @brief ID 65, NSSRWL Service Settings
 * @details Set/Get the NSSRWL Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_setNssRwlSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettings *setVal);

/**
 * @brief ID 66, Wheel Reference Speed
 * @details Set momentum wheel reference speed
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_setNssRwlWheelSpeedRef(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedRef *setVal);

/**
 * @brief ID 67, Motor Current
 * @details Set motor current
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_setNssRwlMotorCurrent(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlMotorCurrent *setVal);


 /* GET function prototypes */

/**
 * @brief ID 182, Wheel Speed All
 * @details Wheel speed measurement for all wheels (does not depend on instance selection)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNssRwlWheelSpeedAll(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlWheelSpeedAll* returnVal);

/**
 * @brief ID 184, Raw NSSRWL System TLM RWL0
 * @details Get NSSRWL System TLM Packet from RWL0
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNssRwlTlmSystem0(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmSystem0* returnVal);

/**
 * @brief ID 186, Raw NSSRWL Extended TLM RWL0
 * @details Get NSSRWL Extended TLM Packet from RWL0
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNssRwlTlmExtended0(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmExtended0* returnVal);

/**
 * @brief ID 188, Raw NSSRWL Standard TLM RWL0
 * @details Get NSSRWL Standard TLM Packet from RWL0
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNssRwlTlmStandard0(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlTlmStandard0* returnVal);

/**
 * @brief ID 190, Wheel Speed RWL0
 * @details Wheel speed measurement from RWL0
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNssRwlWheelSpeed0(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 191, NSSRWL Service Settings
 * @details Set/Get the NSSRWL Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNssRwlSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSvcSettings* returnVal);

/**
 * @brief ID 192, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean *returnVal);

/**
 * @brief ID 193, Node Service Status
 * @details Node Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNodeSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NodeSvcStatus* returnVal);

/**
 * @brief ID 194, NSSRWL Service Status
 * @details NSSRWL Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlCommon1_getNssRwlSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlCommon1_NssRwlSvcStatus* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_COMMON_1_H
