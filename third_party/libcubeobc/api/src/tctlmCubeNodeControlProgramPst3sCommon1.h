/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCubeNodeControlProgramPst3sCommonEnums.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3sCommon1_NodeState
*/
typedef enum TctlmCubeNodeControlProgramPst3sCommon1_NodeStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NODE_OFF = 0,          /**< Node is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NODE_IDLE = 1,         /**< Node is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NODE_PST3S_PWR = 2,    /**< Node is powering on or off one or more PST3S's */
} TctlmCubeNodeControlProgramPst3sCommon1_NodeState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3sCommon1_Pst3sState
*/
typedef enum TctlmCubeNodeControlProgramPst3sCommon1_Pst3sStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_OFF = 0,      /**< PSST3S is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_BOOT = 1,     /**< PSST3S is Booting */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_IDLE = 2,     /**< PSST3S is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_AUTO = 3,     /**< PST3S is Auto-Sampling */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__PST3S_ERROR = 4,    /**< PST3S is in an Error State */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerState
*/
typedef enum TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__POWERED_NO_CHANGE = 0,    /**< No change */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__POWERED_OFF = 1,          /**< PST3S Power Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__POWERED_ON = 2,           /**< PST3S Power On */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms
*/
typedef enum TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmsEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__NONE = 0,                        /**< No TcTlm history */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_OPERATING_MODE = 1,          /**< Set Operating Mode */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_NUM_NAVIGATION_STARS = 2,    /**< Set Number of Navigation Stars */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_EXPOSURE = 3,                /**< Set Exposure */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_IFT = 4,                     /**< Set Image Fixed Threshold */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SAAMODE = 5,                 /**< Set SAA Mode */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SAATHRESHOLD = 6,            /**< Set SAA Threshold */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_EXT_IMG = 7,                 /**< Set Ext Image transfer */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_IMG_GAIN = 8,                /**< Set Imaging Gain */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_FSST = 9,                    /**< Set Four Star Search Threshold */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SECOND_CALIBRATION = 10,     /**< Set Second Calibration */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_TMT = 11,                    /**< Set Tracking Mode Threshold */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_QUAT_FILTERING = 12,         /**< Set Quaternion Filtering */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_DYN_MODE = 13,               /**< Set Dynamic Mode */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_EDAC_OFF = 14,               /**< Set EDAC off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_ICT = 15,                    /**< Set Image Capture Transfer */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SET_SYSTEM_RESET = 16,           /**< Set System Reset */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__GET_TLM = 17,                    /**< Get Tlm */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult
*/
typedef enum TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResultEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TC_TLM_NONE = 0,       /**< No Transaction Yet */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TC_NACK = 1,           /**< TC Nack */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TC_ACK = 2,            /**< TC Ack */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TLM = 3,               /**< TLM Response */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__SUM_ERROR = 4,         /**< Sum Error */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__CORRUPT_DATA = 5,      /**< Corrupt Data */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__JUNK_DATA = 6,         /**< Junk Data */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__INCOMPLETE_MSG = 7,    /**< Incomplete Message */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TIMEOUT = 8,           /**< Timeout */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__TXERROR = 9,           /**< Tx Error */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1__OVERFLOW = 10,         /**< Overflow */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult;

/**
 * @brief PST3S Power State message structure
 * @details Set the PST3S Power State
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerStruct {
    U32 unixTimeSeconds;                                                  /**< Current Unix time s (used for second calibration)  (measurment unit is [s]) */
    U32 unixTimeNanoSeconds;                                              /**< Current Unix time ns (used for second calibration)  (measurment unit is [ns]. valid range is between 0 ns and 999999999 ns) */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerState powerStr0;    /**< STR0 Power State  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerState powerStr1;    /**< STR1 Power State  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerState powerStr2;    /**< STR2 Power State  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPowerState powerStr3;    /**< STR3 Power State  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPower;

/**
 * @brief PST3S Service Settings message structure
 * @details Set/Get the PST3S Service Settings
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSvcSettingsStruct {
    U32 maxTcTlmErrors;                                                        /**< PST3S Maximum Number of TcTlm Errors Before Entering Error State  */
    U8 sampleFrequency;                                                        /**< PST3S Sample Frequency  (measurment unit is [Hz]. valid range is between 1 Hz and 15 Hz) */
    Boolean autoSample;                                                        /**< PST3S Auto-Sample Enable/Disable  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;    /**< PST3S API Version  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSvcSettings;

/**
 * @brief Node Service Status message structure
 * @details Node Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_NodeSvcStatusStruct {
    TctlmCubeNodeControlProgramPst3sCommon1_NodeState nodeState;    /**< CubeNode Node Service State  */
    U32 bootErrorCodeStr0;                                          /**< STR0 Boot Error Code  */
    U32 bootErrorCodeStr1;                                          /**< STR1 Boot Error Code  */
    U32 bootErrorCodeStr2;                                          /**< STR2 Boot Error Code  */
    U32 bootErrorCodeStr3;                                          /**< STR3 Boot Error Code  */
} TctlmCubeNodeControlProgramPst3sCommon1_NodeSvcStatus;

/**
 * @brief PST3S Service Status message structure
 * @details PST3S Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSvcStatusStruct {
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sState stateStr0;                          /**< STR0 Service State  */
    U32 failureCountStr0;                                                                  /**< STR0 TcTlm Failure Count  */
    U32 failureCountLastSuccessStr0;                                                       /**< STR0 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms lastTransactionStr0;               /**< STR0 Last Transaction  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult lastTransactionResultStr0;    /**< STR0 Last Transaction Result  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sState stateStr1;                          /**< STR1 Service State  */
    U32 failureCountStr1;                                                                  /**< STR1 TcTlm Failure Count  */
    U32 failureCountLastSuccessStr1;                                                       /**< STR1 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms lastTransactionStr1;               /**< STR1 Last Transaction  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult lastTransactionResultStr1;    /**< STR1 Last Transaction Result  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sState stateStr2;                          /**< STR2 Service State  */
    U32 failureCountStr2;                                                                  /**< STR2 TcTlm Failure Count  */
    U32 failureCountLastSuccessStr2;                                                       /**< STR2 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms lastTransactionStr2;               /**< STR2 Last Transaction  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult lastTransactionResultStr2;    /**< STR2 Last Transaction Result  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sState stateStr3;                          /**< STR3 Service State  */
    U32 failureCountStr3;                                                                  /**< STR3 TcTlm Failure Count  */
    U32 failureCountLastSuccessStr3;                                                       /**< STR3 TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlms lastTransactionStr3;               /**< STR3 Last Transaction  */
    TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTcTlmResult lastTransactionResultStr3;    /**< STR3 Last Transaction Result  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSvcStatus;

/**
 * @brief PST3S Number of Navigation Stars message structure
 * @details Set the PST3S Number of navigation stars
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sNumberNavigationStarsStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;    /**< Target STR instance  */
    U8 numberStars;                                                       /**< PST3S Number of Navigation Stars  (valid range is between 0  and 7 ) */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sNumberNavigationStars;

/**
 * @brief PST3S Image Exposure message structure
 * @details Set the PST3S Image Exposure
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sExposureStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;    /**< Target STR instance  */
    U8 exposure;                                                          /**< PST3S Image Exposure  (measurment unit is [ms]. valid range is between 0 ms and 100 ms) */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sExposure;

/**
 * @brief PST3S Image Fixed Threshold message structure
 * @details Set the PST3S Image Fixed Threshold (Factory Only)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sImageFixedThresholdStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;    /**< Target STR instance  */
    U8 threshold;                                                         /**< PST3S Image Fixed Threshold  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sImageFixedThreshold;

/**
 * @brief PST3S SAA Mode message structure
 * @details Set the PST3S SAA Mode
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSaaModeStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;          /**< Target STR instance  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;    /**< PST3S SAA Mode  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSaaMode;

/**
 * @brief PST3S SAA Threshold message structure
 * @details Set the PST3S SAA Threshold
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSaaThresholdStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;    /**< Target STR instance  */
    U8 saaThreshold;                                                      /**< PST3S SAA Threshold  (valid range is between 0  and 31 ) */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSaaThreshold;

/**
 * @brief PST3S Four Star Search Threshold message structure
 * @details Set the PST3S Four Star Search Threshold (Not Recommended)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sFourStarSearchThresholdStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;    /**< Target STR instance  */
    U8 threshold;                                                         /**< PST3S Four Star Search Threshold  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sFourStarSearchThreshold;

/**
 * @brief PST3S Second Calibration (Unix Time) message structure
 * @details Set the PST3S Second Calibration (Unix Time)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSecondCalibrationStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;    /**< Target STR instance  */
    U32 unixTime;                                                         /**< PST3S Second Calibration (Unix Time)  (measurment unit is [S]) */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSecondCalibration;

/**
 * @brief PST3S Tracking Mode Threshold message structure
 * @details Set the PST3S Tracking Mode Threshold (Not Recommended)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTrackingModeThresholdStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;    /**< Target STR instance  */
    U8 threshold;                                                         /**< PST3S Tracking Mode Threshold  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTrackingModeThreshold;

/**
 * @brief PST3S Dynamic Mode message structure
 * @details Set the PST3S Dynamic Mode
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sDynamicModeStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;               /**< Target STR instance  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;    /**< PST3S Dynamic Mode  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sDynamicMode;

/**
 * @brief PST3S Quaternion Filtering message structure
 * @details Set the PST3S Quaternion Filtering
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sQuaternionFilteringStruct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle strHandle;                          /**< Target STR instance  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringSetState quaternionFiltering;    /**< PST3S Quaternion Filtering  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sQuaternionFiltering;

/**
 * @brief PST3S RAW TLM STR0 message structure
 * @details Get PST3S TLM Packet from STR0. Triggers TLM Request
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTlm0Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]. valid range is between 0 S and 1 S) */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVersion;                                                                              /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTlm0;

/**
 * @brief PST3S Attitude Data STR0 message structure
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR0
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sAttitude0Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    F32 quat1;                                                                                       /**< PST3S Quaternion 1  (valid range is between -1  and 1 ) */
    F32 quat2;                                                                                       /**< PST3S Quaternion 2  (valid range is between -1  and 1 ) */
    F32 quat3;                                                                                       /**< PST3S Quaternion 3  (valid range is between -1  and 1 ) */
    F32 quat4;                                                                                       /**< PST3S Quaternion 4  (valid range is between -1  and 1 ) */
    F32 angVelX;                                                                                     /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                     /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                     /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sRateQuality rateQuality;                        /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                 /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                          /**< PST3S Unix Seconds Decimal  (measurment unit is [S]) */
    U8 numberOfExtractedStars;                                                                       /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDataValid dataValid;                            /**< PST3S Data Valid  */
    U8 identifiedStars;                                                                              /**< PST3S Number of Identified Stars  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sAttitude0;

/**
 * @brief PST3S Housekeeping Data STR0 message structure
 * @details Get the Last Sampled PST3S Housekeeping related data from STR0
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sHousekeeping0Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    S8 temperature;                                                                                  /**< PST3S Temperature  (measurment unit is [C]) */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                          /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult cmosChipIdResult;                /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSelfTestResult fpgaMRamResult;                  /**< PST3S FPGA MRAM Self-test Result  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sExtImageState extImageState;                    /**< PST3S External Image State  */
    U8 deviceNumber;                                                                                 /**< PST3S Device Number  */
    U8 softwareVerion;                                                                               /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                               /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                            /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sHousekeeping0;

/**
 * @brief PST3S Config STR0 message structure
 * @details Get the Last Sampled PST3S Config related data from STR0
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3sCommon1_Pst3sConfig0Struct {
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sApiVersion apiVersion;                          /**< PST3S API Version  */
    U8 imageExposure;                                                                                /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                               /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                             /**< PST3S BackGround Values  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sOperatingModes operatingMode;                   /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                  /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                           /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sDynamicModeEnum dynamicMode;                    /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sSaaWorkingMode saaMode;                         /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                 /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sQFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                     /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                            /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                              /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3sCommon1_Pst3sConfig0;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 57, PST3S Dynamic Mode
 * @details Set the PST3S Dynamic Mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sDynamicMode(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sDynamicMode *setVal);

/**
 * @brief ID 58, PST3S SAA Mode
 * @details Set the PST3S SAA Mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sSaaMode(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSaaMode *setVal);

/**
 * @brief ID 59, PST3S Service Settings
 * @details Set/Get the PST3S Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSvcSettings *setVal);

/**
 * @brief ID 60, PST3S Power State
 * @details Set the PST3S Power State
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sPower(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sPower *setVal);

/**
 * @brief ID 61, PST3S Quaternion Filtering
 * @details Set the PST3S Quaternion Filtering
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sQuaternionFiltering(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sQuaternionFiltering *setVal);

/**
 * @brief ID 62, PST3S Second Calibration (Unix Time)
 * @details Set the PST3S Second Calibration (Unix Time)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sSecondCalibration(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSecondCalibration *setVal);

/**
 * @brief ID 63, PST3S Image Exposure
 * @details Set the PST3S Image Exposure
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sExposure(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sExposure *setVal);

/**
 * @brief ID 65, PST3S Number of Navigation Stars
 * @details Set the PST3S Number of navigation stars
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sNumberNavigationStars(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sNumberNavigationStars *setVal);

/**
 * @brief ID 66, PST3S Four Star Search Threshold
 * @details Set the PST3S Four Star Search Threshold (Not Recommended)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sFourStarSearchThreshold(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sFourStarSearchThreshold *setVal);

/**
 * @brief ID 67, PST3S Tracking Mode Threshold
 * @details Set the PST3S Tracking Mode Threshold (Not Recommended)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sTrackingModeThreshold(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTrackingModeThreshold *setVal);

/**
 * @brief ID 68, PST3S System Reset
 * @details Set the PST3S System Reset
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sSystemReset(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle setVal);

/**
 * @brief ID 69, PST3S Image Fixed Threshold
 * @details Set the PST3S Image Fixed Threshold (Factory Only)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sImageFixedThreshold(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sImageFixedThreshold *setVal);

/**
 * @brief ID 70, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);

/**
 * @brief ID 71, PST3S SAA Threshold
 * @details Set the PST3S SAA Threshold
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sSaaThreshold(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSaaThreshold *setVal);

/**
 * @brief ID 72, PST3S EDAC Off
 * @details Set the PST3S EDAC Off
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_setPst3sEdacOff(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommonEnums_Pst3sHandle setVal);


 /* GET function prototypes */

/**
 * @brief ID 189, Node Service Status
 * @details Node Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getNodeSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_NodeSvcStatus* returnVal);

/**
 * @brief ID 190, PST3S Config STR0
 * @details Get the Last Sampled PST3S Config related data from STR0
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getPst3sConfig0(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sConfig0* returnVal);

/**
 * @brief ID 191, PST3S Attitude Data STR0
 * @details Get the Last Sampled PST3S Attitude Specific Data from STR0
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getPst3sAttitude0(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sAttitude0* returnVal);

/**
 * @brief ID 192, PST3S Service Status
 * @details PST3S Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getPst3sSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSvcStatus* returnVal);

/**
 * @brief ID 193, PST3S RAW TLM STR0
 * @details Get PST3S TLM Packet from STR0. Triggers TLM Request
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getPst3sTlm0(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sTlm0* returnVal);

/**
 * @brief ID 194, PST3S Housekeeping Data STR0
 * @details Get the Last Sampled PST3S Housekeeping related data from STR0
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getPst3sHousekeeping0(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sHousekeeping0* returnVal);

/**
 * @brief ID 195, PST3S Service Settings
 * @details Set/Get the PST3S Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getPst3sSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3sCommon1_Pst3sSvcSettings* returnVal);

/**
 * @brief ID 196, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPstsCommon1_getNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_COMMON_1_H
