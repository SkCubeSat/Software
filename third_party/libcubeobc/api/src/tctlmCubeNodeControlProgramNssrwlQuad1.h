/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_QUAD_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_QUAD_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCubeNodeControlProgramNssrwlCommonEnums.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCubeNodeControlProgramNssrwlCommon1.h"
#include "tctlmCubeNodeCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief NSSRWL Port Map message structure
 * @details Mapping of connected NSSRWL(s) from port to RWLx (there should not be duplicates, the unused port(s) should be INVALID)
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlPortMapStruct {
    TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle rwlPort1;    /**< Assigns an RWL handle to the NSSRWL connected to port 1  */
    TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle rwlPort2;    /**< Assigns an RWL handle to the NSSRWL connected to port 2  */
    TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle rwlPort3;    /**< Assigns an RWL handle to the NSSRWL connected to port 3  */
    TctlmCubeNodeControlProgramNssrwlCommonEnums_NssRwlHandle rwlPort4;    /**< Assigns an RWL handle to the NSSRWL connected to port 4  */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlPortMap;

/**
 * @brief Raw NSSRWL Standard TLM RWL1 message structure
 * @details Get NSSRWL Standard TLM Packet from RWL1
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard1Struct {
    U8 serialNumber;               /**< Serial Number  */
    F32 targetValue;               /**< Target Value  (valid range is between -10000  and 10000 ) */
    F32 actualWheelSpeed;          /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 actualMotorCurrent;        /**< Actual Motor current  (measurment unit is [mA]. valid range is between 0 mA and 20000 mA) */
    F32 temperature;               /**< Temperature  (measurment unit is [C]. valid range is between -273 C and 273 C) */
    F32 iSignal;                   /**< I-Signal (loop)  (valid range is between -10000  and 10000 ) */
    Boolean reactionWheelMode;     /**< Set if Reaction Wheel mode is On  */
    Boolean currentControlMode;    /**< Set if Current Control mode is Active  */
    Boolean speedControlMode;      /**< Set if Speed Control mode is Active  */
    Boolean torqueMode;            /**< Set if Torque mode is Active  */
    Boolean wheelGyroMode;         /**< Set if Wheel/Gyro mode is On  */
    Boolean omegaPiControlLoop;    /**< Set if Omega-PI Control Loop is Active  */
    Boolean anglePdControlLoop;    /**< Set if Angle-PD Control Loop is Active  */
    Boolean bootControl;           /**< Set if Boot Control is Active  */
    Boolean gyroConnected;         /**< Set if Gyro Connected  */
    Boolean gyroTelemetry;         /**< Set if Gyro Telemetry is On  */
    Boolean gyroFlagRegister;      /**< Set if Gyro Flag Register is not zero  */
    Boolean crcError;              /**< Set if CRC Error Protected Area  */
    Boolean wrongLlCommand;        /**< Set if Wrong Low-Level Command  */
    Boolean wrongHlCommand;        /**< Set if Wrong High-Level Command  */
    Boolean toutSci1Main;          /**< Set if Timeout on SCI1 Main Interface  */
    Boolean toutSci2Gyro;          /**< Set if Timeout on SCI2 Gyro Interface  */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard1;

/**
 * @brief Raw NSSRWL Standard TLM RWL2 message structure
 * @details Get NSSRWL Standard TLM Packet from RWL2
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard2Struct {
    U8 serialNumber;               /**< Serial Number  */
    F32 targetValue;               /**< Target Value  (valid range is between -10000  and 10000 ) */
    F32 actualWheelSpeed;          /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 actualMotorCurrent;        /**< Actual Motor current  (measurment unit is [mA]. valid range is between 0 mA and 20000 mA) */
    F32 temperature;               /**< Temperature  (measurment unit is [C]. valid range is between -273 C and 273 C) */
    F32 iSignal;                   /**< I-Signal (loop)  (valid range is between -10000  and 10000 ) */
    Boolean reactionWheelMode;     /**< Set if Reaction Wheel mode is On  */
    Boolean currentControlMode;    /**< Set if Current Control mode is Active  */
    Boolean speedControlMode;      /**< Set if Speed Control mode is Active  */
    Boolean torqueMode;            /**< Set if Torque mode is Active  */
    Boolean wheelGyroMode;         /**< Set if Wheel/Gyro mode is On  */
    Boolean omegaPiControlLoop;    /**< Set if Omega-PI Control Loop is Active  */
    Boolean anglePdControlLoop;    /**< Set if Angle-PD Control Loop is Active  */
    Boolean bootControl;           /**< Set if Boot Control is Active  */
    Boolean gyroConnected;         /**< Set if Gyro Connected  */
    Boolean gyroTelemetry;         /**< Set if Gyro Telemetry is On  */
    Boolean gyroFlagRegister;      /**< Set if Gyro Flag Register is not zero  */
    Boolean crcError;              /**< Set if CRC Error Protected Area  */
    Boolean wrongLlCommand;        /**< Set if Wrong Low-Level Command  */
    Boolean wrongHlCommand;        /**< Set if Wrong High-Level Command  */
    Boolean toutSci1Main;          /**< Set if Timeout on SCI1 Main Interface  */
    Boolean toutSci2Gyro;          /**< Set if Timeout on SCI2 Gyro Interface  */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard2;

/**
 * @brief Raw NSSRWL Standard TLM RWL3 message structure
 * @details Get NSSRWL Standard TLM Packet from RWL3
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard3Struct {
    U8 serialNumber;               /**< Serial Number  */
    F32 targetValue;               /**< Target Value  (valid range is between -10000  and 10000 ) */
    F32 actualWheelSpeed;          /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 actualMotorCurrent;        /**< Actual Motor current  (measurment unit is [mA]. valid range is between 0 mA and 20000 mA) */
    F32 temperature;               /**< Temperature  (measurment unit is [C]. valid range is between -273 C and 273 C) */
    F32 iSignal;                   /**< I-Signal (loop)  (valid range is between -10000  and 10000 ) */
    Boolean reactionWheelMode;     /**< Set if Reaction Wheel mode is On  */
    Boolean currentControlMode;    /**< Set if Current Control mode is Active  */
    Boolean speedControlMode;      /**< Set if Speed Control mode is Active  */
    Boolean torqueMode;            /**< Set if Torque mode is Active  */
    Boolean wheelGyroMode;         /**< Set if Wheel/Gyro mode is On  */
    Boolean omegaPiControlLoop;    /**< Set if Omega-PI Control Loop is Active  */
    Boolean anglePdControlLoop;    /**< Set if Angle-PD Control Loop is Active  */
    Boolean bootControl;           /**< Set if Boot Control is Active  */
    Boolean gyroConnected;         /**< Set if Gyro Connected  */
    Boolean gyroTelemetry;         /**< Set if Gyro Telemetry is On  */
    Boolean gyroFlagRegister;      /**< Set if Gyro Flag Register is not zero  */
    Boolean crcError;              /**< Set if CRC Error Protected Area  */
    Boolean wrongLlCommand;        /**< Set if Wrong Low-Level Command  */
    Boolean wrongHlCommand;        /**< Set if Wrong High-Level Command  */
    Boolean toutSci1Main;          /**< Set if Timeout on SCI1 Main Interface  */
    Boolean toutSci2Gyro;          /**< Set if Timeout on SCI2 Gyro Interface  */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard3;

/**
 * @brief Raw NSSRWL Extended TLM RWL1 message structure
 * @details Get NSSRWL Extended TLM Packet from RWL1
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended1Struct {
    U8 serialNumber;         /**< Serial Number  */
    F32 actualWheelSpeed;    /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended1;

/**
 * @brief Raw NSSRWL Extended TLM RWL2 message structure
 * @details Get NSSRWL Extended TLM Packet from RWL2
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended2Struct {
    U8 serialNumber;         /**< Serial Number  */
    F32 actualWheelSpeed;    /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended2;

/**
 * @brief Raw NSSRWL Extended TLM RWL3 message structure
 * @details Get NSSRWL Extended TLM Packet from RWL3
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended3Struct {
    U8 serialNumber;         /**< Serial Number  */
    F32 actualWheelSpeed;    /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended3;

/**
 * @brief Raw NSSRWL System TLM RWL1 message structure
 * @details Get NSSRWL System TLM Packet from RWL1
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem1Struct {
    U8 serialNumber;          /**< Serial Number  */
    U8 deviceType;            /**< Device Type  */
    U8 deviceId;              /**< Device ID  */
    U8 month;                 /**< Month  */
    U8 year;                  /**< Year  */
    U16 statusRegister;       /**< Status Register  */
    U16 acsRegister;          /**< ACS Flag Register  */
    U16 systemRegister;       /**< System Flag Register  */
    U16 rwaRegister;          /**< RWA Flag Register  */
    U8 gyroRegister;          /**< Gyro Flag Register  */
    U16 bootFlag;             /**< Boot Flag  */
    U16 bootVector;           /**< Boot Vector  */
    U8 acsControlInterval;    /**< ACS Control Interval  (measurment unit is [10.24ms]) */
    U16 acsStartAddr;         /**< Actual start address ACS boot control  */
    U16 tachoStartAddr;       /**< Actual start address Tacho control  */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem1;

/**
 * @brief Raw NSSRWL System TLM RWL2 message structure
 * @details Get NSSRWL System TLM Packet from RWL2
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem2Struct {
    U8 serialNumber;          /**< Serial Number  */
    U8 deviceType;            /**< Device Type  */
    U8 deviceId;              /**< Device ID  */
    U8 month;                 /**< Month  */
    U8 year;                  /**< Year  */
    U16 statusRegister;       /**< Status Register  */
    U16 acsRegister;          /**< ACS Flag Register  */
    U16 systemRegister;       /**< System Flag Register  */
    U16 rwaRegister;          /**< RWA Flag Register  */
    U8 gyroRegister;          /**< Gyro Flag Register  */
    U16 bootFlag;             /**< Boot Flag  */
    U16 bootVector;           /**< Boot Vector  */
    U8 acsControlInterval;    /**< ACS Control Interval  (measurment unit is [10.24ms]) */
    U16 acsStartAddr;         /**< Actual start address ACS boot control  */
    U16 tachoStartAddr;       /**< Actual start address Tacho control  */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem2;

/**
 * @brief Raw NSSRWL System TLM RWL3 message structure
 * @details Get NSSRWL System TLM Packet from RWL3
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem3Struct {
    U8 serialNumber;          /**< Serial Number  */
    U8 deviceType;            /**< Device Type  */
    U8 deviceId;              /**< Device ID  */
    U8 month;                 /**< Month  */
    U8 year;                  /**< Year  */
    U16 statusRegister;       /**< Status Register  */
    U16 acsRegister;          /**< ACS Flag Register  */
    U16 systemRegister;       /**< System Flag Register  */
    U16 rwaRegister;          /**< RWA Flag Register  */
    U8 gyroRegister;          /**< Gyro Flag Register  */
    U16 bootFlag;             /**< Boot Flag  */
    U16 bootVector;           /**< Boot Vector  */
    U8 acsControlInterval;    /**< ACS Control Interval  (measurment unit is [10.24ms]) */
    U16 acsStartAddr;         /**< Actual start address ACS boot control  */
    U16 tachoStartAddr;       /**< Actual start address Tacho control  */
} TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem3;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 68, NSSRWL Port Map
 * @details Mapping of connected NSSRWL(s) from port to RWLx (there should not be duplicates, the unused port(s) should be INVALID)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_setNssRwlPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlPortMap *setVal);


 /* GET function prototypes */

/**
 * @brief ID 183, Raw NSSRWL System TLM RWL2
 * @details Get NSSRWL System TLM Packet from RWL2
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmSystem2(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem2* returnVal);

/**
 * @brief ID 185, Raw NSSRWL Extended TLM RWL2
 * @details Get NSSRWL Extended TLM Packet from RWL2
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmExtended2(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended2* returnVal);

/**
 * @brief ID 187, Raw NSSRWL Standard TLM RWL2
 * @details Get NSSRWL Standard TLM Packet from RWL2
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmStandard2(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard2* returnVal);

/**
 * @brief ID 189, Wheel Speed RWL2
 * @details Wheel speed measurement from RWL2
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlWheelSpeed2(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 195, Wheel Speed RWL1
 * @details Wheel speed measurement from RWL1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlWheelSpeed1(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 196, Wheel Speed RWL3
 * @details Wheel speed measurement from RWL3
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlWheelSpeed3(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 197, Raw NSSRWL Standard TLM RWL1
 * @details Get NSSRWL Standard TLM Packet from RWL1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmStandard1(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard1* returnVal);

/**
 * @brief ID 198, Raw NSSRWL Standard TLM RWL3
 * @details Get NSSRWL Standard TLM Packet from RWL3
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmStandard3(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmStandard3* returnVal);

/**
 * @brief ID 199, Raw NSSRWL Extended TLM RWL1
 * @details Get NSSRWL Extended TLM Packet from RWL1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmExtended1(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended1* returnVal);

/**
 * @brief ID 200, Raw NSSRWL Extended TLM RWL3
 * @details Get NSSRWL Extended TLM Packet from RWL3
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmExtended3(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmExtended3* returnVal);

/**
 * @brief ID 201, Raw NSSRWL System TLM RWL1
 * @details Get NSSRWL System TLM Packet from RWL1
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmSystem1(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem1* returnVal);

/**
 * @brief ID 202, Raw NSSRWL System TLM RWL3
 * @details Get NSSRWL System TLM Packet from RWL3
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlTlmSystem3(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlTlmSystem3* returnVal);

/**
 * @brief ID 203, NSSRWL Port Map
 * @details Mapping of connected NSSRWL(s) from port to RWLx (there should not be duplicates, the unused port(s) should be INVALID)
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwlQuad1_getNssRwlPortMap(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwlQuad1_NssRwlPortMap* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_QUAD_1_H
