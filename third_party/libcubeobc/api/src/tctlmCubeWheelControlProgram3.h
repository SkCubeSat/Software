/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__H
#define TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCommonFramework1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeWheelControlProgram3_ReadReference
*/
typedef enum TctlmCubeWheelControlProgram3_ReadReferenceEnum {
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__FIRST = 0,    /**< Reference from first entry */
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__LAST = 1,     /**< Reference from last entry */
} TctlmCubeWheelControlProgram3_ReadReference;

/**
 * @brief Enumeration for TctlmCubeWheelControlProgram3_ControlModeVal
*/
typedef enum TctlmCubeWheelControlProgram3_ControlModeValEnum {
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__NO_CONTROL = 0,          /**< No control mode */
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__DUTY_CYCLE_INPUT = 1,    /**< Duty cycle input mode */
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__SPEED_CONTROLLER = 2,    /**< Speed controller mode */
} TctlmCubeWheelControlProgram3_ControlModeVal;

/**
 * @brief Enumeration for TctlmCubeWheelControlProgram3_WheelErrorState
*/
typedef enum TctlmCubeWheelControlProgram3_WheelErrorStateEnum {
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__DATA_VALID = 0,                      /**< Data is valid */
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__ENCODER_NO_RESPONSE = 1,             /**< No response from encoder */
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__HALL_SENSOR_ENCODER_MISMATCH = 2,    /**< Mismatch between speed reported from hall sensors vs that of encoder */
    TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3__SPEED_NOT_REACHED_TIMEOUT = 3,       /**< Speed setpoint not reached within allocated time period */
} TctlmCubeWheelControlProgram3_WheelErrorState;

/**
 * @brief Backup Gain message structure
 * @details Backup speed controller gain values
 */
typedef struct TCTLM_PACKED TctlmCubeWheelControlProgram3_BackupGainStruct {
    F32 kp;    /**< Proportional gain  (valid range is between 0  and 2 ) */
    F32 ki;    /**< Integrator gain  (valid range is between 0  and 2 ) */
    F32 kd;    /**< Feedback gain  (valid range is between 0  and 2 ) */
} TctlmCubeWheelControlProgram3_BackupGain;

/**
 * @brief Main Gain message structure
 * @details Main speed controller gain values
 */
typedef struct TCTLM_PACKED TctlmCubeWheelControlProgram3_MainGainStruct {
    F32 kp;    /**< Proportional gain  (valid range is between 0  and 2 ) */
    F32 ki;    /**< Integrator gain  (valid range is between 0  and 2 ) */
    F32 kd;    /**< Feedback gain  (valid range is between 0  and 2 ) */
} TctlmCubeWheelControlProgram3_MainGain;

/**
 * @brief Status and Error Flags message structure
 * @details Processor status and error flags
 */
typedef struct TCTLM_PACKED TctlmCubeWheelControlProgram3_StatusErrorFlagsStruct {
    Boolean invalidTelemetry;      /**< An invalid telemetry request was received  */
    Boolean invalidTelecommand;    /**< An invalid telecommand was received  */
    Boolean encoderError;          /**< Encoder indicates an error  */
    Boolean uARTError;             /**< Error in UART protocol  */
    Boolean i2CError;              /**< Error in I2C protocol  */
    Boolean cANError;              /**< Error in CAN protocol  */
    Boolean configError;           /**< Configuration load error  */
    Boolean speedError;            /**< Speed measurements indicates an error  */
} TctlmCubeWheelControlProgram3_StatusErrorFlags;

/**
 * @brief Health Telemetry message structure
 * @details Health telemetry for CubeWheel
 */
typedef struct TCTLM_PACKED TctlmCubeWheelControlProgram3_HealthTlmStruct {
    U16 batteryCurrent;     /**< Battery current measurement  (measurment unit is [mA]. valid range is between 0 mA and 500 mA) */
    U16 batteryVoltage;     /**< Battery voltage measurement  (measurment unit is [mV]. valid range is between 0 mV and 24000 mV) */
    U16 digitalCurrent;     /**< Total 3.3V Current  (measurment unit is [mA]. valid range is between 0 mA and 100 mA) */
    F32 mcuTemperature;     /**< MCU temperature measurement  (measurment unit is [C]. valid range is between -20 C and 120 C) */
    U8 watchdogCount[5];    /**< Bitmask representing virtual watchdog region warning counters.  */
} TctlmCubeWheelControlProgram3_HealthTlm;

/**
 * @brief Wheel Data message structure
 * @details Complete wheel data
 */
typedef struct TCTLM_PACKED TctlmCubeWheelControlProgram3_WheelDataStruct {
    F32 wheelSpeed;                                                   /**< Wheel speed measurement in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 wheelSpeedBackup;                                             /**< Wheel backup speed measurement in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 wheelReference;                                               /**< Wheel reference speed in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    U16 batteryCurrent;                                               /**< Battery current measurement  (measurment unit is [mA]) */
    TctlmCubeWheelControlProgram3_WheelErrorState wheelErrorState;    /**< Wheel data status  */
} TctlmCubeWheelControlProgram3_WheelData;

/**
 * @brief Wheel Speed message structure
 * @details Wheel speed measurement
 */
typedef struct TCTLM_PACKED TctlmCubeWheelControlProgram3_WheelSpeedStruct {
    F32 wheelSpeed;                                                   /**< Wheel speed measurement in rpm  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    TctlmCubeWheelControlProgram3_WheelErrorState wheelErrorState;    /**< Wheel error state  */
} TctlmCubeWheelControlProgram3_WheelSpeed;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 60, Motor Power
 * @details Switch motor power on/off
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setMotorPower(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);

/**
 * @brief ID 61, Backup Gain
 * @details Backup speed controller gain values
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setBackupGain(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_BackupGain *setVal);

/**
 * @brief ID 62, Clear Errors
 * @details Clear the processor error flags
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setClearErrors(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 64, Wheel Reference Speed
 * @details Set momentum wheel reference speed
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setWheelSpeedRef(TypeDef_TctlmEndpoint *endpoint, F32 setVal);

/**
 * @brief ID 65, Wheel Commanded Duty Cycle
 * @details Set motor commanded PWM control signal
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setWheelDuty(TypeDef_TctlmEndpoint *endpoint, F32 setVal);

/**
 * @brief ID 66, Backup Wheel Mode
 * @details Set the back-up wheel mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setBackupWheelMode(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);

/**
 * @brief ID 67, Main Gain
 * @details Main speed controller gain values
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setMainGain(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_MainGain *setVal);

/**
 * @brief ID 68, PWM Gain
 * @details General PWM gain
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_setPWMGain(TypeDef_TctlmEndpoint *endpoint, F32 setVal);


 /* GET function prototypes */

/**
 * @brief ID 187, Control Mode
 * @details Get the motor control mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getControlMode(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_ControlModeVal *returnVal);

/**
 * @brief ID 188, Wheel Speed
 * @details Wheel speed measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getWheelSpeed(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_WheelSpeed* returnVal);

/**
 * @brief ID 189, Health Telemetry
 * @details Health telemetry for CubeWheel
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getHealthTlm(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_HealthTlm* returnVal);

/**
 * @brief ID 190, Wheel Data
 * @details Complete wheel data
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getWheelData(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_WheelData* returnVal);

/**
 * @brief ID 191, PWM Gain
 * @details General PWM gain
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getPWMGain(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 192, Backup Gain
 * @details Backup speed controller gain values
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getBackupGain(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_BackupGain* returnVal);

/**
 * @brief ID 193, Main Gain
 * @details Main speed controller gain values
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getMainGain(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_MainGain* returnVal);

/**
 * @brief ID 194, Status and Error Flags
 * @details Processor status and error flags
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getStatusErrorFlags(TypeDef_TctlmEndpoint *endpoint, TctlmCubeWheelControlProgram3_StatusErrorFlags* returnVal);

/**
 * @brief ID 195, Wheel Commanded Duty Cycle
 * @details Set motor commanded PWM control signal
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getWheelDuty(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 196, Wheel Reference Speed
 * @details Set momentum wheel reference speed
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getWheelSpeedRef(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 197, Motor Power
 * @details Switch motor power on/off
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getMotorPower(TypeDef_TctlmEndpoint *endpoint, Boolean *returnVal);

/**
 * @brief ID 198, Backup Wheel Mode
 * @details Set the back-up wheel mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeWheelControlProgram3_getBackupWheelMode(TypeDef_TctlmEndpoint *endpoint, Boolean *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_WHEEL_CONTROL_PROGRAM_3_H
