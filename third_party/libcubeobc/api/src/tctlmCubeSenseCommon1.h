/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_SENSE_COMMON_1__H
#define TCTLM_CUBE_SENSE_COMMON_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeSenseCommon1_OvercurrentResult
*/
typedef enum TctlmCubeSenseCommon1_OvercurrentResultEnum {
    TCTLM_CUBE_SENSE_COMMON_1__NO_OVERCURRENT = 0,    /**< No Overcurrent */
    TCTLM_CUBE_SENSE_COMMON_1__OVERCURRENT = 1,       /**< Overcurrent detected */
} TctlmCubeSenseCommon1_OvercurrentResult;

/**
 * @brief Set Camera Settings message structure
 * @details Change camera settings
 */
typedef struct TCTLM_PACKED TctlmCubeSenseCommon1_CamSettingsStruct {
    U16 exposure;    /**< Value for exposure register  */
    U8 aGC;          /**< Value for Gain Control register  */
    U8 blueGain;     /**< Value for Blue Gain register  */
    U8 redGain;      /**< Value for Red Gain register  */
} TctlmCubeSenseCommon1_CamSettings;

/**
 * @brief Configuration message structure
 * @details Configuration data for the CubeSense
 */
typedef struct TCTLM_PACKED TctlmCubeSenseCommon1_ConfigStruct {
    U8 camThreshold;          /**< Byte value 0-255 indicating light threshold level  */
    Boolean camAutoAdjust;    /**< 0 = disabled, 1 = enabled  */
    U16 camExposure;          /**< exposure time register value  */
    U8 camAgc;                /**< Common Gain  */
    U8 camBlueGain;           /**< Blue Gain  */
    U8 camRedGain;            /**< Red Gain  */
} TctlmCubeSenseCommon1_Config;

/**
 * @brief Health Telemetry message structure
 * @details Health Telemetry for CubeSense
 */
typedef struct TCTLM_PACKED TctlmCubeSenseCommon1_HealthTlmStruct {
    U16 mcuCurrent;                                             /**< MCU current  (measurment unit is [mA]) */
    S16 mcuTemp;                                                /**< MCU temperature in deg C  (measurment unit is [deg C]) */
    U16 mcuVoltage;                                             /**< MCU supply voltage  (measurment unit is [mV]) */
    U16 currentCam;                                             /**< Camera current  (measurment unit is [mA]) */
    U16 currentSram;                                            /**< SRAM current  (measurment unit is [mA]) */
    U16 currentCamMax;                                          /**< Max recorded Camera current  (measurment unit is [mA]) */
    U16 currentSramMax;                                         /**< Max recorded SRAM current  (measurment unit is [mA]) */
    TctlmCubeSenseCommon1_OvercurrentResult overcurrentCam;     /**< CAM overcurrent detected  */
    TctlmCubeSenseCommon1_OvercurrentResult overcurrentSram;    /**< SRAM overcurrent detected  */
    U8 watchdogCount[5];                                        /**< Bitmask representing virtual watchdog region warning counters.  */
} TctlmCubeSenseCommon1_HealthTlm;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 126, Set Camera Settings
 * @details Change camera settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseCommon1_setCamSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseCommon1_CamSettings *setVal);

/**
 * @brief ID 127, Set Camera Auto Adjust
 * @details Enable or disable auto-adjust for camera exposure
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeSenseCommon1_setCamAutoAdjust(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);


 /* GET function prototypes */

/**
 * @brief ID 253, Health Telemetry
 * @details Health Telemetry for CubeSense
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseCommon1_getHealthTlm(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseCommon1_HealthTlm* returnVal);

/**
 * @brief ID 254, Configuration
 * @details Configuration data for the CubeSense
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeSenseCommon1_getConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeSenseCommon1_Config* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_SENSE_COMMON_1_H
