/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_MAG_CONTROL_PROGRAM_COMMON_1__H
#define TCTLM_CUBE_MAG_CONTROL_PROGRAM_COMMON_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCubeMagControlProgramCommonEnums.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief CubeMag Config message structure
 * @details CubeMag Config Items
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramCommon1_ConfigStruct {
    TctlmCubeMagControlProgramCommonEnums_MagType primaryMagnetometerPref;    /**< The Prefered Primary Magnetometer  */
    TctlmCubeMagControlProgramCommonEnums_MagType primaryMagnetometerCurr;    /**< The Magnetometer to set as the primary  */
    U16 deployTimeout;                                                        /**< Depoyment Timeout. Applied to Burn Wire  (measurment unit is [mS]. valid range is between 2000 mS and 30000 mS) */
    Boolean primaryAutoSelect;                                                /**< Allow the firmware to change the primary magnetometer based on error conditions  (valid range is between 0  and 1 ) */
} TctlmCubeMagControlProgramCommon1_Config;

/**
 * @brief MMC Magnetometer Config message structure
 * @details MMC Magnetometer Specific Config
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramCommon1_MmcConfigStruct {
    Boolean autoSample;                                                       /**< MMC Auto-Sample Enable/Disable  */
    TctlmCubeMagControlProgramCommonEnums_SamplePeriod autoSamplePeriod;      /**< MMC Auto Sample Period  */
    TctlmCubeMagControlProgramCommonEnums_FilterType sampleFilterType;        /**< MMC Sample Filter Type  */
    TctlmCubeMagControlProgramCommonEnums_FilterOrder sampleFilterOrder;      /**< MMC Sample Butterworth filter order  */
    U8 sampleFilterDepth;                                                     /**< MMC Sample Filter Depth when using Simple Averaging  */
    TctlmCubeMagControlProgramCommonEnums_SampleDuration singleSampleTime;    /**< MMC Sample Duration when Auto-Sample is disabled  */
    TctlmCubeMagControlProgramCommonEnums_SampleBusy sampleBusyAction;        /**< MMC Action to take when sample is busy when requested  */
    U32 maxErrorsMag;                                                         /**< MMC Maximum number of allowed megnetometer measurement errors  */
    U32 maxErrorsTmp;                                                         /**< MMC Maximum number of allowed temperature measurement errors  */
} TctlmCubeMagControlProgramCommon1_MmcConfig;

/**
 * @brief MMC Calibration Parameters message structure
 * @details MMC Magnetometer Calibration Parameters
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramCommon1_MmcCalibrationStruct {
    F32 xd1;    /**< X-Axis: d1  (valid range is between -100000  and 100000 ) */
    F32 xd2;    /**< X-Axis: d2  (valid range is between -100000  and 100000 ) */
    F32 xs1;    /**< X-Axis: s1  (valid range is between -100000  and 100000 ) */
    F32 xs2;    /**< X-Axis: s2  (valid range is between -100000  and 100000 ) */
    F32 yd1;    /**< Y-Axis: d1  (valid range is between -100000  and 100000 ) */
    F32 yd2;    /**< Y-Axis: d2  (valid range is between -100000  and 100000 ) */
    F32 ys1;    /**< Y-Axis: s1  (valid range is between -100000  and 100000 ) */
    F32 ys2;    /**< Y-Axis: s2  (valid range is between -100000  and 100000 ) */
    F32 zd1;    /**< Z-Axis: d1  (valid range is between -100000  and 100000 ) */
    F32 zd2;    /**< Z-Axis: d2  (valid range is between -100000  and 100000 ) */
    F32 zs1;    /**< Z-Axis: s1  (valid range is between -100000  and 100000 ) */
    F32 zs2;    /**< Z-Axis: s2  (valid range is between -100000  and 100000 ) */
} TctlmCubeMagControlProgramCommon1_MmcCalibration;

/**
 * @brief State message structure
 * @details All Service States
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramCommon1_StateStruct {
    TctlmCubeMagControlProgramCommonEnums_MagState magState;           /**< CubeMag Service State  */
    TctlmCubeMagControlProgramCommonEnums_MntState primaryMagState;    /**< Primary Magnetometer State  */
    TctlmCubeMagControlProgramCommonEnums_MntState redMagState;        /**< Redundant Magnetometer State  */
} TctlmCubeMagControlProgramCommon1_State;

/**
 * @brief Primary Magnetometer Measurement message structure
 * @details Primary Magnetometer Measurement
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramCommon1_PrimaryMagMeasurementStruct {
    F32 x_axis;           /**< X_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 y_axis;           /**< Y_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 z_axis;           /**< Z_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    Boolean dataValid;    /**< Is Data Valid  */
} TctlmCubeMagControlProgramCommon1_PrimaryMagMeasurement;

/**
 * @brief Primary Magnetometer Measurement Raw message structure
 * @details Unfiltered last Primary Magnetometer Measurement
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramCommon1_PrimaryMagMeasurementRawStruct {
    F32 x_axis;           /**< X_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 y_axis;           /**< Y_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 z_axis;           /**< Z_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    Boolean dataValid;    /**< Is Data Valid  */
} TctlmCubeMagControlProgramCommon1_PrimaryMagMeasurementRaw;

/**
 * @brief Primary Magnetometer Diagnostics message structure
 * @details Primary Magnetometer Diagnostics
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramCommon1_PrimaryMagDiagnosticsStruct {
    U32 lastErrorMag;     /**< Last Error Code from magnetometer measurement  */
    U32 errorCountMag;    /**< Error Counter for megnetometer measurement  */
    U32 lastErrorTmp;     /**< Last Error Code from temperature measurement  */
    U32 errorCountTmp;    /**< Error Counter for temperature measurement  */
} TctlmCubeMagControlProgramCommon1_PrimaryMagDiagnostics;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 60, CubeMag Config
 * @details CubeMag Config Items
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_setConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_Config *setVal);

/**
 * @brief ID 61, MMC Magnetometer Config
 * @details MMC Magnetometer Specific Config
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_setMmcConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_MmcConfig *setVal);

/**
 * @brief ID 67, Sample Primary
 * @details Trigger a single Sample the Primary Magnetometer (auto-sample == OFF)
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_setSamplePrimary(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 68, MMC Calibration Parameters
 * @details MMC Magnetometer Calibration Parameters
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_setMmcCalibration(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_MmcCalibration *setVal);


 /* GET function prototypes */

/**
 * @brief ID 185, MMC Calibration Parameters
 * @details MMC Magnetometer Calibration Parameters
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getMmcCalibration(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_MmcCalibration* returnVal);

/**
 * @brief ID 186, CubeMag Config
 * @details CubeMag Config Items
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_Config* returnVal);

/**
 * @brief ID 187, Primary Magnetometer Measurement Raw
 * @details Unfiltered last Primary Magnetometer Measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getPrimaryMagMeasurementRaw(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_PrimaryMagMeasurementRaw* returnVal);

/**
 * @brief ID 188, State
 * @details All Service States
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getState(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_State* returnVal);

/**
 * @brief ID 196, MMC Magnetometer Config
 * @details MMC Magnetometer Specific Config
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getMmcConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_MmcConfig* returnVal);

/**
 * @brief ID 197, Primary Magnetometer Measurement
 * @details Primary Magnetometer Measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getPrimaryMagMeasurement(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_PrimaryMagMeasurement* returnVal);

/**
 * @brief ID 198, Primary Magnetometer Temperature
 * @details Main Magnetometer Measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getPrimaryMagTemp(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 199, Primary Magnetometer Diagnostics
 * @details Primary Magnetometer Diagnostics
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramCommon1_getPrimaryMagDiagnostics(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramCommon1_PrimaryMagDiagnostics* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_MAG_CONTROL_PROGRAM_COMMON_1_H
