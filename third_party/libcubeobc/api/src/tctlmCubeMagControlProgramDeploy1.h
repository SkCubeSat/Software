/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_MAG_CONTROL_PROGRAM_DEPLOY_1__H
#define TCTLM_CUBE_MAG_CONTROL_PROGRAM_DEPLOY_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCubeMagControlProgramCommonEnums.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCubeMagControlProgramCommon1.h"
#include "tctlmCubeMagCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeMagControlProgramDeploy1_MagicDeployArm
*/
typedef enum TctlmCubeMagControlProgramDeploy1_MagicDeployArmEnum {
    TCTLM_CUBE_MAG_CONTROL_PROGRAM_DEPLOY_1__MAGIC_ARM = 11,    /**< Magic number to Arm CubeMag for deployment */
} TctlmCubeMagControlProgramDeploy1_MagicDeployArm;

/**
 * @brief Enumeration for TctlmCubeMagControlProgramDeploy1_MagicDeploy
*/
typedef enum TctlmCubeMagControlProgramDeploy1_MagicDeployEnum {
    TCTLM_CUBE_MAG_CONTROL_PROGRAM_DEPLOY_1__MAGIC_DEPLOY = 22,    /**< Deploy CubeMag */
} TctlmCubeMagControlProgramDeploy1_MagicDeploy;

/**
 * @brief PNI Magnetometer Config message structure
 * @details PNI Magnetometer Specific Config
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramDeploy1_PniConfigStruct {
    Boolean autoSample;                                                       /**< PNI Auto-Sample Enable/Disable  */
    TctlmCubeMagControlProgramCommonEnums_SamplePeriod autoSamplePeriod;      /**< PNI Auto Sample Period  */
    TctlmCubeMagControlProgramCommonEnums_FilterType sampleFilterType;        /**< PNI Sample Filter Type  */
    TctlmCubeMagControlProgramCommonEnums_FilterOrder sampleFilterOrder;      /**< PNI Sample Butterworth filter order  */
    U8 sampleFilterDepth;                                                     /**< PNI Sample Filter Depth when using Simple Averaging  */
    TctlmCubeMagControlProgramCommonEnums_SampleDuration singleSampleTime;    /**< PNI Sample Duration when Auto-Sample is disabled  */
    TctlmCubeMagControlProgramCommonEnums_SampleBusy sampleBusyAction;        /**< PNI Action to take when sample is busy when requested  */
    U32 maxErrorsMag;                                                         /**< PNI Maximum number of allowed megnetometer measurement errors  */
    U32 maxErrorsTmp;                                                         /**< PNI Maximum number of allowed temperature measurement errors  */
} TctlmCubeMagControlProgramDeploy1_PniConfig;

/**
 * @brief PNI Calibration Parameters message structure
 * @details PNI Magnetometer Calibration Parameters
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramDeploy1_PniCalibrationStruct {
    F32 xd1;    /**< X-Axis: d1  (valid range is between -100000  and 100000 ) */
    F32 xd2;    /**< X-Axis: d2  (valid range is between -100000  and 100000 ) */
    F32 xs1;    /**< X-Axis: s1  (valid range is between -100000  and 100000 ) */
    F32 xs2;    /**< X-Axis: s2  (valid range is between -100000  and 100000 ) */
    F32 yd1;    /**< Y-Axis: d1  (valid range is between -100000  and 100000 ) */
    F32 yd2;    /**< Y-Axis: d2  (valid range is between -100000  and 100000 ) */
    F32 ys1;    /**< Y-Axis: s1  (valid range is between -100000  and 100000 ) */
    F32 ys2;    /**< Y-Axis: s2  (valid range is between -100000  and 100000 ) */
    F32 zd1;    /**< Z-Axis: d1  (valid range is between -100000  and 100000 ) */
    F32 zd2;    /**< Z-Axis: d2  (valid range is between -100000  and 100000 ) */
    F32 zs1;    /**< Z-Axis: s1  (valid range is between -100000  and 100000 ) */
    F32 zs2;    /**< Z-Axis: s2  (valid range is between -100000  and 100000 ) */
} TctlmCubeMagControlProgramDeploy1_PniCalibration;

/**
 * @brief Redundant Magnetometer Measurement message structure
 * @details Redundant Magnetometer Measurement
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramDeploy1_RedMagMeasurementStruct {
    F32 x_axis;           /**< X_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 y_axis;           /**< Y_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 z_axis;           /**< Z_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    Boolean dataValid;    /**< Is Data Valid  */
} TctlmCubeMagControlProgramDeploy1_RedMagMeasurement;

/**
 * @brief Redundant Magnetometer Measurement Raw message structure
 * @details Unfiltered last Redundant Magnetometer Measurement
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramDeploy1_RedMagMeasurementRawStruct {
    F32 x_axis;           /**< X_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 y_axis;           /**< Y_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    F32 z_axis;           /**< Z_axis  (measurment unit is [nT]. valid range is between -800000 nT and 800000 nT) */
    Boolean dataValid;    /**< Is Data Valid  */
} TctlmCubeMagControlProgramDeploy1_RedMagMeasurementRaw;

/**
 * @brief Deployment Status message structure
 * @details Deployment Status. Only Applicable to CubeMag Deploy type
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramDeploy1_DeploymentStatusStruct {
    U32 burnCurrent;               /**< Burn Wire Current  (measurment unit is [mA]) */
    Boolean deploymentPinState;    /**< Deployment Detection Pin State  (valid range is between 0  and 1 ) */
    Boolean burnPinState;          /**< Deployment Burn Wire Enable Pin State  (valid range is between 0  and 1 ) */
    Boolean burnUnderCurrent;      /**< Burn Wire Under Current Flag  (valid range is between 0  and 1 ) */
    Boolean burnOverCurrent;       /**< Burn Wire Over Current Flag  (valid range is between 0  and 1 ) */
    Boolean deploymentTimeout;     /**< CubeMag did not detect deployment before configured timeout  (valid range is between 0  and 1 ) */
} TctlmCubeMagControlProgramDeploy1_DeploymentStatus;

/**
 * @brief Health Telemetry message structure
 * @details Health Telemetry for CubeMagDeploy
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramDeploy1_HealthTlmStruct {
    U16 mcuCurrent;                /**< MCU current  (measurment unit is [mA]) */
    S16 mcuTemp;                   /**< MCU temperature in deg C  (measurment unit is [deg C]) */
    U16 mcuVoltage;                /**< MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) */
    F32 primMagTemp;               /**< Primary Magnetometer Temperature  (valid range is between -75  and 150 ) */
    F32 redMagTemp;                /**< Redundant Magnetometer Temperature  (valid range is between -75  and 150 ) */
    U32 burnCurrent;               /**< Burn Wire Current  (measurment unit is [mA]) */
    Boolean deploymentPinState;    /**< Deployment Detection Pin State  (valid range is between 0  and 1 ) */
    Boolean burnPinState;          /**< Deployment Burn Wire Enable Pin State  (valid range is between 0  and 1 ) */
    Boolean burnUnderCurrent;      /**< Burn Wire Under Current Flag  (valid range is between 0  and 1 ) */
    Boolean burnOverCurrent;       /**< Burn Wire Over Current Flag  (valid range is between 0  and 1 ) */
    Boolean deploymentTimeout;     /**< CubeMag did not detect deployment before configured timeout  (valid range is between 0  and 1 ) */
    U8 watchdogCount[5];           /**< Bitmask representing virtual watchdog region warning counters.  */
} TctlmCubeMagControlProgramDeploy1_HealthTlm;

/**
 * @brief Redundant Magnetometer Diagnostics message structure
 * @details Redundant Magnetometer Diagnostics
 */
typedef struct TCTLM_PACKED TctlmCubeMagControlProgramDeploy1_RedMagDiagnosticsStruct {
    U32 lastErrorMag;     /**< Last Error Code from magnetometer measurement  */
    U32 errorCountMag;    /**< Error Counter for megnetometer measurement  */
    U32 lastErrorTmp;     /**< Last Error Code from temperature measurement  */
    U32 errorCountTmp;    /**< Error Counter for temperature measurement  */
} TctlmCubeMagControlProgramDeploy1_RedMagDiagnostics;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 62, PNI Calibration Parameters
 * @details PNI Magnetometer Calibration Parameters
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_setPniCalibration(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_PniCalibration *setVal);

/**
 * @brief ID 63, Deploy
 * @details Deploy CubeMag
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_setDeploy(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_MagicDeploy setVal);

/**
 * @brief ID 64, PNI Magnetometer Config
 * @details PNI Magnetometer Specific Config
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_setPniConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_PniConfig *setVal);

/**
 * @brief ID 65, Sample Redundant
 * @details Trigger a single Sample the Redundant Magnetometer (auto-sample == OFF)
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_setSampleRed(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 66, Arm Deploy
 * @details Arm CubeMag for Deployment
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_setDeployArm(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_MagicDeployArm setVal);


 /* GET function prototypes */

/**
 * @brief ID 189, PNI Calibration Parameters
 * @details PNI Magnetometer Calibration Parameters
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getPniCalibration(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_PniCalibration* returnVal);

/**
 * @brief ID 190, Deployment Status
 * @details Deployment Status. Only Applicable to CubeMag Deploy type
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getDeploymentStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_DeploymentStatus* returnVal);

/**
 * @brief ID 191, Redundant Magnetometer Measurement Raw
 * @details Unfiltered last Redundant Magnetometer Measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getRedMagMeasurementRaw(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_RedMagMeasurementRaw* returnVal);

/**
 * @brief ID 192, PNI Magnetometer Config
 * @details PNI Magnetometer Specific Config
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getPniConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_PniConfig* returnVal);

/**
 * @brief ID 193, Redundant Magnetometer Measurement
 * @details Redundant Magnetometer Measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getRedMagMeasurement(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_RedMagMeasurement* returnVal);

/**
 * @brief ID 194, Redundant Magnetometer Temperature
 * @details Redundant Magnetometer Measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getRedMagTemp(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 195, Redundant Magnetometer Diagnostics
 * @details Redundant Magnetometer Diagnostics
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getRedMagDiagnostics(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_RedMagDiagnostics* returnVal);

/**
 * @brief ID 254, Health Telemetry
 * @details Health Telemetry for CubeMagDeploy
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeMagControlProgramDeploy1_getHealthTlm(TypeDef_TctlmEndpoint *endpoint, TctlmCubeMagControlProgramDeploy1_HealthTlm* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_MAG_CONTROL_PROGRAM_DEPLOY_1_H
